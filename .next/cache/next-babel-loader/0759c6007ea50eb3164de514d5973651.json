{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ADD_CELL, REMOVE_CELL } from \"../actionTypes\";\nimport deleteItem from \"../../helpers/deleteItem\";\nconst initialState = {\n  days: {\n    \"2021-01-01\": {\n      id: \"2021-01-01\",\n      cells: [\"happy\", \"bread\", \"water\"]\n    },\n    \"2021-01-05\": {\n      id: \"2021-01-05\",\n      cells: [\"sad\", \"potatoes\", \"coffee\", \"iron\"]\n    },\n    \"2021-01-12\": {\n      id: \"2021-01-12\",\n      cells: [\"motivated\", \"pasta\", \"water\", \"zink\"]\n    },\n    \"2021-01-21\": {\n      id: \"2021-01-21\",\n      cells: [\"happy\", \"rice\", \"wine\", \"zink\", \"iron\"]\n    }\n  }\n};\nexport default function cellReducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_CELL:\n      {\n        var _state$days$dayId;\n\n        const {\n          payload\n        } = action;\n        const {\n          dayId,\n          cellName\n        } = payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          days: _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : state.days), {}, {\n            [dayId]: _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : state.days[dayId]), {}, {\n              id: dayId,\n              cells: [...((state === null || state === void 0 ? void 0 : (_state$days$dayId = state.days[dayId]) === null || _state$days$dayId === void 0 ? void 0 : _state$days$dayId.cells) || []), cellName]\n            })\n          })\n        });\n      }\n\n    case REMOVE_CELL:\n      {\n        var _state$days$dayId2;\n\n        const {\n          payload\n        } = action;\n        const {\n          dayId,\n          cellName\n        } = payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          days: _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : state.days), {}, {\n            [dayId]: _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : state.days[dayId]), {}, {\n              cells: deleteItem(state === null || state === void 0 ? void 0 : (_state$days$dayId2 = state.days[dayId]) === null || _state$days$dayId2 === void 0 ? void 0 : _state$days$dayId2.cells, cellName)\n            })\n          })\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}