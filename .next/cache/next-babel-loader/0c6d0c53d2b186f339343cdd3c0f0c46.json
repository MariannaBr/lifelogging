{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/mana/c/lifelogging/components/CategoryChart.js\";\nimport { useSelector } from \"react-redux\"; //import { ApexCharts } from \"apexcharts\"\n\nimport { todayChart } from \"../helpers/todayDate\";\n\nconst selectDays = state => state.categories.days;\n\nfunction CategoryChart(props) {\n  const days = useSelector(selectDays); // Array of objects [{}, {}]\n\n  const daysValues = Object.values(days); // get array of days' ids [\"\", \"\"], inputs: data - array of objects [{}, {}]\n\n  const daysIds = daysValues.map(day => day.id);\n\n  function generateDefaultDays(firstDay, today) {\n    for (var defaultDays = [], dt = new Date(firstDay); dt <= today; dt.setDate(dt.getDate() + 1)) {\n      defaultDays.push(new Date(dt));\n    }\n\n    const days = defaultDays.map(day => day.getDate().toString() + \".\" + (day.getMonth() + 1).toString() + \".\");\n    return days;\n  }\n\n  const defaultDays = generateDefaultDays(new Date(daysIds[1]), new Date(todayChart));\n  console.log(defaultDays); // get array of categories of particular day [\"\", \"\"], inputs: day - string, data - array of objects [{}, {}]\n\n  function getCategoriesofDay(day, data) {\n    let categories = [];\n    data.forEach(item => {\n      if (item.id === day) {\n        categories = Object.values(item.categories).map(cat => cat.id);\n      }\n    });\n    return categories;\n  } // get array of cells of particular category [\"\", \"\"], inputs: day - string, category - string, data(category) - array of objects [{}, {}]\n\n\n  function getCellsofCategory(day, category, data) {\n    let cells = [];\n    data.forEach(item => {\n      if (item.id === category) {\n        cells = Object.values(item.cells);\n      }\n    });\n    return cells;\n  } // Array of arrays of objects - categories [[{}, {}], [{}, {}]]\n  //const categoriesValues = daysValues.map((day) => Object.values(day.categories))\n  //console.log(categories)\n  // Array of arrays of ids [[\"\", \"\", \"\"], [\"\", \"\", \"\"]]\n  //const categoriesIds = categories.map((category) => category.map((cat) => cat.id))\n  //console.log(categoriesIds)\n  // Array of arrays of arrays of cells [[[\"\",\"\"],[\"\",\"\"]],[[\"\",\"\"],[\"\",\"\"]]]\n  //const cells = categories.map((category) => category.map((cat) => cat.cells))\n  //console.log(cells)\n  // function getDefaultCell(defaultCells) {\n  //     defaultCells.forEach((cell) => cell.name)\n  // }\n\n\n  const options = {\n    series: [{\n      name: \"\",\n      data: [{\n        x: \"\",\n        y: 0 / 1\n      }, {\n        x: \"\",\n        y: 0 / 1\n      }, {\n        x: \"\",\n        y: 0 / 1\n      }, {\n        x: \"\",\n        y: 0 / 1\n      }]\n    }, {\n      name: \"\",\n      data: [{\n        x: \"\",\n        y: 0 / 1\n      }, {\n        x: \"\",\n        y: 0 / 1\n      }, {\n        x: \"\",\n        y: 0 / 1\n      }, {\n        x: \"\",\n        y: 0 / 1\n      }]\n    }]\n  }; // const options = props.defaultCells.map((cell) => {\n  //     name: cell.name,\n  //     data: \n  // })\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Chart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n}\n\nexport default CategoryChart;","map":{"version":3,"sources":["/home/mana/c/lifelogging/components/CategoryChart.js"],"names":["useSelector","todayChart","selectDays","state","categories","days","CategoryChart","props","daysValues","Object","values","daysIds","map","day","id","generateDefaultDays","firstDay","today","defaultDays","dt","Date","setDate","getDate","push","toString","getMonth","console","log","getCategoriesofDay","data","forEach","item","cat","getCellsofCategory","category","cells","options","series","name","x","y"],"mappings":"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","sourcesContent":["import { useSelector } from \"react-redux\"\n//import { ApexCharts } from \"apexcharts\"\nimport { todayChart } from \"../helpers/todayDate\"\n\nconst selectDays = state => state.categories.days\n\nfunction CategoryChart(props) {\n    \n    const days = useSelector(selectDays)\n    // Array of objects [{}, {}]\n    const daysValues = Object.values(days)\n\n    // get array of days' ids [\"\", \"\"], inputs: data - array of objects [{}, {}]\n    const daysIds = daysValues.map((day) => day.id)\n\n    function generateDefaultDays(firstDay, today) {\n        for (var defaultDays=[], dt=new Date(firstDay); dt<=today; dt.setDate(dt.getDate()+1)) {\n            defaultDays.push(new Date(dt))\n        }\n        const days = defaultDays.map((day) => (day.getDate()).toString() + \".\" + (day.getMonth()+1).toString() + \".\" )\n        return days\n    }\n\n    const defaultDays = generateDefaultDays(new Date(daysIds[1]), new Date(todayChart))\n    console.log(defaultDays)\n\n    // get array of categories of particular day [\"\", \"\"], inputs: day - string, data - array of objects [{}, {}]\n    function getCategoriesofDay(day, data) {\n        let categories = []\n        data.forEach((item) => {\n            if (item.id === day) {\n                categories = Object.values(item.categories).map((cat) => cat.id)\n            }\n        })\n        return categories\n    }\n\n    // get array of cells of particular category [\"\", \"\"], inputs: day - string, category - string, data(category) - array of objects [{}, {}]\n    function getCellsofCategory(day, category, data) {\n        let cells = []\n        data.forEach((item) => {\n            if (item.id === category) {\n                cells = Object.values(item.cells)\n            }\n        })\n        return cells\n    }\n\n    // Array of arrays of objects - categories [[{}, {}], [{}, {}]]\n    //const categoriesValues = daysValues.map((day) => Object.values(day.categories))\n    //console.log(categories)\n\n    // Array of arrays of ids [[\"\", \"\", \"\"], [\"\", \"\", \"\"]]\n    //const categoriesIds = categories.map((category) => category.map((cat) => cat.id))\n    //console.log(categoriesIds)\n\n    // Array of arrays of arrays of cells [[[\"\",\"\"],[\"\",\"\"]],[[\"\",\"\"],[\"\",\"\"]]]\n    //const cells = categories.map((category) => category.map((cat) => cat.cells))\n    //console.log(cells)\n\n    // function getDefaultCell(defaultCells) {\n    //     defaultCells.forEach((cell) => cell.name)\n    // }\n\n    const options = {\n        series: [\n            {\n                name: \"\",\n                data: [{\n                    x: \"\",\n                    y: 0/1\n                }, {\n                    x: \"\",\n                    y: 0/1\n                }, {\n                    x: \"\",\n                    y: 0/1\n                },{\n                    x: \"\",\n                    y: 0/1\n                }]\n            }, {\n                name: \"\",\n                data: [{\n                    x: \"\",\n                    y: 0/1\n                }, {\n                    x: \"\",\n                    y: 0/1\n                }, {\n                    x: \"\",\n                    y: 0/1\n                },{\n                    x: \"\",\n                    y: 0/1\n                }]\n            }\n        ]\n    }\n    \n    // const options = props.defaultCells.map((cell) => {\n    //     name: cell.name,\n    //     data: \n    // })\n\n    return (\n        <div>\n            Chart\n        </div>\n    )\n\n}\n\nexport default CategoryChart"]},"metadata":{},"sourceType":"module"}