{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/mana/c/lifelogging/components/CategoryChart.js\";\nimport dynamic from \"next/dynamic\";\nimport chartOptions from \"../helpers/chartOptions\";\nvar Chart = dynamic(_c = function _c() {\n  return import(\"react-apexcharts\");\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"react-apexcharts\")];\n    },\n    modules: [\"react-apexcharts\"]\n  }\n});\n_c2 = Chart;\n\nfunction CategoryChart(props) {\n  // default chart series, generated for every cell\n  var defaultSeries = props.defaultCells.map(function (cell) {\n    return {\n      name: cell.name,\n      data: props.defaultDatas\n    };\n  });\n  var CellDayValue = [];\n  var data = {};\n\n  for (var i = 0; i < props.chartDays.length; i++) {\n    data[props.chartDays[i]] = {};\n    console.log(\"data[day]\", data[props.chartDays[i]]);\n\n    for (var j = 0; j < props.defaultCells.length; j++) {\n      data[props.chartDays[i]][props.defaultCells[j]] = 0;\n      CellDayValue.push(data);\n    }\n  } //console.log(CellDayValue)\n\n\n  var chartWidth = (props.chartDays.length * 15).toString();\n  var chartHeight = (props.defaultCells.length * 50).toString();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-lg w-1/5 font-semibold text-\".concat(props.color, \"-400\"),\n      children: props.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Chart, {\n        options: chartOptions(props.color),\n        series: defaultSeries,\n        type: \"heatmap\",\n        width: chartWidth,\n        height: chartHeight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_c3 = CategoryChart;\nexport default CategoryChart; // const series = props.defaultCells.map((cell) => {\n//     return {\n//       name: cell.name,\n//       data: chartDays.map((day) => {\n//           return {\n//               x: simplifyDate(day),\n//               y: cellHappenedToday(cell.name, day)\n//           }\n//       })\n//     }\n//   })\n// function cellHappenedToday(cell, chartDay) {\n//     return storeDaysValues.reduce((total, day) => {\n//         if (day.id === chartDay) {\n//             const storeCellsIds = Object.values(day.cells)\n//             if (storeCellsIds.includes(cell)) {\n//                 return total + 1\n//             }\n//         }               \n//         return total \n//     }, 0)\n// }\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Chart$dynamic\");\n$RefreshReg$(_c2, \"Chart\");\n$RefreshReg$(_c3, \"CategoryChart\");","map":{"version":3,"sources":["/home/mana/c/lifelogging/components/CategoryChart.js"],"names":["dynamic","chartOptions","Chart","ssr","CategoryChart","props","defaultSeries","defaultCells","map","cell","name","data","defaultDatas","CellDayValue","i","chartDays","length","console","log","j","push","chartWidth","toString","chartHeight","color","id"],"mappings":";;AAAA,OAAOA,OAAP,MAAoB,cAApB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AAEA,IAAMC,KAAK,GAAGF,OAAO,MAAC;AAAA,SAAM,OAAQ,kBAAR,CAAN;AAAA,CAAD,EAAoC;AAACG,EAAAA,GAAG,EAAE,KAAN;AAAA;AAAA;AAAA,kCAArB,kBAAqB;AAAA;AAAA,cAArB,kBAAqB;AAAA;AAAA,CAApC,CAArB;MAAMD,K;;AAEN,SAASE,aAAT,CAAuBC,KAAvB,EAA8B;AAE1B;AACA,MAAMC,aAAa,GAAGD,KAAK,CAACE,YAAN,CAAmBC,GAAnB,CAAuB,UAACC,IAAD,EAAU;AACnD,WAAO;AACHC,MAAAA,IAAI,EAAED,IAAI,CAACC,IADR;AAEHC,MAAAA,IAAI,EAAEN,KAAK,CAACO;AAFT,KAAP;AAIH,GALqB,CAAtB;AAOA,MAAMC,YAAY,GAAG,EAArB;AACA,MAAIF,IAAI,GAAG,EAAX;;AACA,OAAK,IAAIG,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACT,KAAK,CAACU,SAAN,CAAgBC,MAAhC,EAAuCF,CAAC,EAAxC,EAA4C;AACxCH,IAAAA,IAAI,CAACN,KAAK,CAACU,SAAN,CAAgBD,CAAhB,CAAD,CAAJ,GAA2B,EAA3B;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBP,IAAI,CAACN,KAAK,CAACU,SAAN,CAAgBD,CAAhB,CAAD,CAA5B;;AACA,SAAK,IAAIK,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACd,KAAK,CAACE,YAAN,CAAmBS,MAAnC,EAA2CG,CAAC,EAA5C,EAAgD;AAC5CR,MAAAA,IAAI,CAACN,KAAK,CAACU,SAAN,CAAgBD,CAAhB,CAAD,CAAJ,CAAyBT,KAAK,CAACE,YAAN,CAAmBY,CAAnB,CAAzB,IAAkD,CAAlD;AACAN,MAAAA,YAAY,CAACO,IAAb,CAAkBT,IAAlB;AACH;AACJ,GAnByB,CAqB1B;;;AAEA,MAAMU,UAAU,GAAG,CAAChB,KAAK,CAACU,SAAN,CAAgBC,MAAhB,GAAuB,EAAxB,EAA4BM,QAA5B,EAAnB;AACA,MAAMC,WAAW,GAAG,CAAClB,KAAK,CAACE,YAAN,CAAmBS,MAAnB,GAA0B,EAA3B,EAA+BM,QAA/B,EAApB;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,4BACI;AAAK,MAAA,SAAS,6CAAsCjB,KAAK,CAACmB,KAA5C,SAAd;AAAA,gBACKnB,KAAK,CAACoB;AADX;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAA,6BACI,QAAC,KAAD;AAAO,QAAA,OAAO,EAAExB,YAAY,CAACI,KAAK,CAACmB,KAAP,CAA5B;AAA2C,QAAA,MAAM,EAAElB,aAAnD;AAAkE,QAAA,IAAI,EAAC,SAAvE;AAAiF,QAAA,KAAK,EAAEe,UAAxF;AAAoG,QAAA,MAAM,EAAEE;AAA5G;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;MArCQnB,a;AAuCT,eAAeA,aAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import dynamic from \"next/dynamic\"\nimport chartOptions from \"../helpers/chartOptions\"\n\nconst Chart = dynamic(() => import (\"react-apexcharts\"), {ssr: false})\n\nfunction CategoryChart(props) {\n\n    // default chart series, generated for every cell\n    const defaultSeries = props.defaultCells.map((cell) => {\n        return {\n            name: cell.name,\n            data: props.defaultDatas\n        }\n    })\n\n    const CellDayValue = []\n    let data = {}\n    for (var i=0; i<props.chartDays.length;i++) {\n        data[props.chartDays[i]] = {}\n        console.log(\"data[day]\",data[props.chartDays[i]])\n        for (var j=0; j<props.defaultCells.length; j++) {\n            data[props.chartDays[i]][props.defaultCells[j]] = 0\n            CellDayValue.push(data)\n        }\n    }\n\n    //console.log(CellDayValue)\n\n    const chartWidth = (props.chartDays.length*15).toString()\n    const chartHeight = (props.defaultCells.length*50).toString()\n\n    return (\n        <div className=\"flex flex-row\">\n            <div className={`text-lg w-1/5 font-semibold text-${props.color}-400`}>\n                {props.id}\n            </div>\n            <div>\n                <Chart options={chartOptions(props.color)} series={defaultSeries} type=\"heatmap\" width={chartWidth} height={chartHeight}/>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default CategoryChart\n\n// const series = props.defaultCells.map((cell) => {\n//     return {\n//       name: cell.name,\n//       data: chartDays.map((day) => {\n//           return {\n//               x: simplifyDate(day),\n//               y: cellHappenedToday(cell.name, day)\n//           }\n//       })\n//     }\n//   })\n\n// function cellHappenedToday(cell, chartDay) {\n//     return storeDaysValues.reduce((total, day) => {\n//         if (day.id === chartDay) {\n//             const storeCellsIds = Object.values(day.cells)\n//             if (storeCellsIds.includes(cell)) {\n//                 return total + 1\n//             }\n//         }               \n//         return total \n//     }, 0)\n// }\n\n"]},"metadata":{},"sourceType":"module"}