{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const getCellState = store => store.cell;\nexport const getCategory = store => getCellState(store) ? getCellState(store).cells : [];\nexport const getCellByName = (store, name) => getCellState(store) ? _objectSpread(_objectSpread({}, getCellState(store).cell[name]), {}, {\n  name\n}) : {};\nexport const getCells = store => getCategory(store).map(name => getCellByName(store, name));","map":{"version":3,"sources":["/home/mana/c/lifelogging/redux/selectors.js"],"names":["getCellState","store","cell","getCategory","cells","getCellByName","name","getCells","map"],"mappings":";;;;;;AAAA,OAAO,MAAMA,YAAY,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAApC;AAEP,OAAO,MAAMC,WAAW,GAAGF,KAAK,IAAID,YAAY,CAACC,KAAD,CAAZ,GAAsBD,YAAY,CAACC,KAAD,CAAZ,CAAoBG,KAA1C,GAAkD,EAA/E;AAEP,OAAO,MAAMC,aAAa,GAAG,CAACJ,KAAD,EAAQK,IAAR,KAAiBN,YAAY,CAACC,KAAD,CAAZ,mCAA0BD,YAAY,CAACC,KAAD,CAAZ,CAAoBC,IAApB,CAAyBI,IAAzB,CAA1B;AAA0DA,EAAAA;AAA1D,KAAkE,EAAzG;AAEP,OAAO,MAAMC,QAAQ,GAAGN,KAAK,IAAIE,WAAW,CAACF,KAAD,CAAX,CAAmBO,GAAnB,CAAuBF,IAAI,IAAID,aAAa,CAACJ,KAAD,EAAQK,IAAR,CAA5C,CAA1B","sourcesContent":["export const getCellState = store => store.cell\n\nexport const getCategory = store => getCellState(store) ? getCellState(store).cells : []\n\nexport const getCellByName = (store, name) => getCellState(store) ? {...getCellState(store).cell[name], name} : {}\n\nexport const getCells = store => getCategory(store).map(name => getCellByName(store, name))"]},"metadata":{},"sourceType":"module"}