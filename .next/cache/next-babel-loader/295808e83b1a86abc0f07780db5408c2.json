{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ADD_CELL, REMOVE_CELL } from \"../actionTypes\";\nconst initialState = {\n  days: {\n    \"0\": {\n      categories: {\n        \"test\": {\n          cells: [\"test\"]\n        }\n      }\n    }\n  },\n  cells: {\n    \"test\": {\n      category: \"test\",\n      days: [\"0\"]\n    }\n  }\n};\n\nfunction deleteItem(arr, val) {\n  return arr.filter(cell => cell != val);\n}\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case ADD_CELL:\n      {\n        var _state$days$dayId, _state$days$dayId2, _state$days$dayId3, _state$days$dayId3$ca, _state$cells$cellName;\n\n        const {\n          payload\n        } = action;\n        const {\n          dayId,\n          categoryName,\n          cellName\n        } = payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          days: _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : state.days), {}, {\n            [dayId]: _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : state.days[dayId]), {}, {\n              categories: _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : (_state$days$dayId = state.days[dayId]) === null || _state$days$dayId === void 0 ? void 0 : _state$days$dayId.categories), {}, {\n                [categoryName]: _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : (_state$days$dayId2 = state.days[dayId]) === null || _state$days$dayId2 === void 0 ? void 0 : _state$days$dayId2.categories[categoryName]), {}, {\n                  cells: [...((state === null || state === void 0 ? void 0 : (_state$days$dayId3 = state.days[dayId]) === null || _state$days$dayId3 === void 0 ? void 0 : (_state$days$dayId3$ca = _state$days$dayId3.categories[categoryName]) === null || _state$days$dayId3$ca === void 0 ? void 0 : _state$days$dayId3$ca.cells) || []), cellName]\n                })\n              })\n            })\n          }),\n          cells: _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : state.cells), {}, {\n            [cellName]: _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : state.cells[cellName]), {}, {\n              category: categoryName,\n              days: [...((state === null || state === void 0 ? void 0 : (_state$cells$cellName = state.cells[cellName]) === null || _state$cells$cellName === void 0 ? void 0 : _state$cells$cellName.days) || []), dayId]\n            })\n          })\n        });\n      }\n\n    case REMOVE_CELL:\n      {\n        var _state$days$dayId4, _state$days$dayId5, _state$days$dayId6, _state$days$dayId6$ca, _state$cells$cellName2;\n\n        const {\n          payload\n        } = action;\n        const {\n          dayId,\n          categoryName,\n          cellName\n        } = payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          days: _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : state.days), {}, {\n            [dayId]: _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : state.days[dayId]), {}, {\n              categories: _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : (_state$days$dayId4 = state.days[dayId]) === null || _state$days$dayId4 === void 0 ? void 0 : _state$days$dayId4.categories), {}, {\n                [categoryName]: _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : (_state$days$dayId5 = state.days[dayId]) === null || _state$days$dayId5 === void 0 ? void 0 : _state$days$dayId5.categories[categoryName]), {}, {\n                  cells: deleteItem(state === null || state === void 0 ? void 0 : (_state$days$dayId6 = state.days[dayId]) === null || _state$days$dayId6 === void 0 ? void 0 : (_state$days$dayId6$ca = _state$days$dayId6.categories[categoryName]) === null || _state$days$dayId6$ca === void 0 ? void 0 : _state$days$dayId6$ca.cells, cellName)\n                })\n              })\n            })\n          }),\n          cells: _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : state.cells), {}, {\n            [cellName]: _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : state.cells[cellName]), {}, {\n              days: deleteItem(state === null || state === void 0 ? void 0 : (_state$cells$cellName2 = state.cells[cellName]) === null || _state$cells$cellName2 === void 0 ? void 0 : _state$cells$cellName2.days, dayId)\n            })\n          })\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/mana/c/lifelogging/redux/reducers/cellReducer.js"],"names":["ADD_CELL","REMOVE_CELL","initialState","days","categories","cells","category","deleteItem","arr","val","filter","cell","state","action","type","payload","dayId","categoryName","cellName"],"mappings":"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","sourcesContent":["import { ADD_CELL, REMOVE_CELL } from \"../actionTypes\"\n\nconst initialState = {\n    days: {\n        \"0\": {\n            categories: {\n                \"test\": {\n                    cells: [\"test\"]\n                }\n            }\n        }\n    },\n    cells: {\n        \"test\": {\n            category: \"test\",\n            days: [\"0\"]\n        }\n    }\n}\n\nfunction deleteItem(arr, val) {\n    return (arr.filter((cell) => cell != val))\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case ADD_CELL: {\n            const { payload } = action\n            const { dayId, categoryName, cellName } = payload\n            return {\n                ...state,\n                days: {\n                    ...state?.days,\n                    [dayId]: {\n                        ...state?.days[dayId],\n                        categories: {\n                            ...state?.days[dayId]?.categories,\n                            [categoryName]: {\n                                ...state?.days[dayId]?.categories[categoryName],\n                                cells: [\n                                    ...state?.days[dayId]?.categories[categoryName]?.cells || [],\n                                    cellName\n                                ]\n                            }\n                        }\n                    }\n                },\n                cells: {\n                    ...state?.cells,\n                    [cellName]: {\n                        ...state?.cells[cellName],\n                        category: categoryName,\n                        days: [\n                            ...state?.cells[cellName]?.days || [],\n                            dayId\n                        ]\n                    }\n                }\n            }\n        }\n        case REMOVE_CELL: {\n            const { payload } = action\n            const { dayId, categoryName, cellName } = payload\n            return {\n                ...state,\n                days: {\n                    ...state?.days,\n                    [dayId]: {\n                        ...state?.days[dayId],\n                        categories: {\n                            ...state?.days[dayId]?.categories,\n                            [categoryName]: {\n                                ...state?.days[dayId]?.categories[categoryName],\n                                cells: deleteItem(state?.days[dayId]?.categories[categoryName]?.cells, cellName)\n                            }\n                        }\n                    }\n                },\n                cells: {\n                    ...state?.cells,\n                    [cellName]: {\n                        ...state?.cells[cellName],\n                        days: deleteItem(state?.cells[cellName]?.days, dayId)\n                    }\n                }\n            }\n        }\n\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}