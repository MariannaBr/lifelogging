{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/mana/c/lifelogging/components/CategoryChart.js\";\nimport { useSelector } from \"react-redux\"; //import { ApexCharts } from \"apexcharts\"\n\nimport { todayChart } from \"../helpers/todayDate\";\nimport generateDefaultDays from \"../helpers/defaultDays\";\n\nconst selectDays = state => state.categories.days;\n\nfunction CategoryChart(props) {\n  const days = useSelector(selectDays); // Array of objects [{}, {}]\n\n  const daysValues = Object.values(days); // get array of days' ids [\"\", \"\"], inputs: data - array of objects [{}, {}]\n\n  const daysIds = daysValues.map(day => day.id);\n  const defaultDays = generateDefaultDays(new Date(daysIds[1]), new Date(todayChart)); //Array of arrays of objects - categories [[{}, {}], [{}, {}]]\n\n  const categoriesValues = daysValues.map(day => Object.values(day.categories)); /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // get array of categories of particular day [\"\", \"\"], inputs: day - string, data - array of objects [{}, {}]\n\n  function getCategoriesofDay(day, data) {\n    let categories = [];\n    data.forEach(item => {\n      if (item.id === day) {\n        categories = Object.values(item.categories).map(cat => cat.id);\n      }\n    });\n    return categories;\n  } // get array of cells of particular category [\"\", \"\"], inputs: category - string, data(category) - array of objects [{}, {}]\n\n\n  function getCellsofCategory(category, data) {\n    let cells = [];\n    data.forEach(item => {\n      if (item.id === category) {\n        cells = Object.values(item.cells);\n      }\n    });\n    return cells;\n  }\n\n  function cellHappenedToday(cell, defaultDay) {\n    if (daysIds.includes(defaultDay)) {\n      daysValues.forEach(day => {\n        if (day.id === defaultDay) {\n          const categoryIds = Object.values(day.categories).map(cat => cat.id);\n\n          if (categoryIds.includes(props.id)) {\n            const cells = Object.values(day.categories[props.id].cells);\n            console.log(\"cells\", cells, \"cell\", cell);\n\n            if (cells.includes(cell)) {\n              console.log(cells.includes(cell));\n              return 1;\n            } else {\n              return 0;\n            }\n          } else {\n            return 0;\n          }\n        } else {\n          return 0;\n        }\n      });\n    } else {\n      return 0;\n    }\n  }\n\n  console.log(\"cell\", cellHappenedToday(\"sad\", \"2021-1-2\")); // const options = props.defaultCells.map((cell) => {\n  //     name: cell.name,\n  //     data: defaultDays.map((day) => {\n  //         x: day,\n  //         y: cellHappenedToday(cell, getCellsofCategory(props.id, getCategoriesofDay(day, daysValues)), getCategoriesofDay(day, daysValues), daysIds, day)\n  //     })\n  // })\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Chart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n\nexport default CategoryChart; // \n//console.log(categories)\n// Array of arrays of ids [[\"\", \"\", \"\"], [\"\", \"\", \"\"]]\n//const categoriesIds = categories.map((category) => category.map((cat) => cat.id))\n//console.log(categoriesIds)\n// Array of arrays of arrays of cells [[[\"\",\"\"],[\"\",\"\"]],[[\"\",\"\"],[\"\",\"\"]]]\n//const cells = categories.map((category) => category.map((cat) => cat.cells))\n//console.log(cells)\n// function getDefaultCell(defaultCells) {\n//     defaultCells.forEach((cell) => cell.name)\n// }\n// function cellHappenedToday(cell, cells, category, days, defaultday) {\n//     if (days.includes(defaultday) && category.includes(props.id) && cells.includes(cell)) {\n//         return 1\n//     } else {\n//         return 0\n//     }  \n// }","map":{"version":3,"sources":["/home/mana/c/lifelogging/components/CategoryChart.js"],"names":["useSelector","todayChart","generateDefaultDays","selectDays","state","categories","days","CategoryChart","props","daysValues","Object","values","daysIds","map","day","id","defaultDays","Date","categoriesValues","getCategoriesofDay","data","forEach","item","cat","getCellsofCategory","category","cells","cellHappenedToday","cell","defaultDay","includes","categoryIds","console","log"],"mappings":"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","sourcesContent":["import { useSelector } from \"react-redux\"\n//import { ApexCharts } from \"apexcharts\"\nimport { todayChart } from \"../helpers/todayDate\"\nimport generateDefaultDays from \"../helpers/defaultDays\"\n\nconst selectDays = state => state.categories.days\n\nfunction CategoryChart(props) {\n    \n    const days = useSelector(selectDays)\n    // Array of objects [{}, {}]\n    const daysValues = Object.values(days)\n\n    // get array of days' ids [\"\", \"\"], inputs: data - array of objects [{}, {}]\n    const daysIds = daysValues.map((day) => day.id)\n\n    const defaultDays = generateDefaultDays(new Date(daysIds[1]), new Date(todayChart))\n\n    //Array of arrays of objects - categories [[{}, {}], [{}, {}]]\n    const categoriesValues = daysValues.map((day) => Object.values(day.categories))\n \n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    // get array of categories of particular day [\"\", \"\"], inputs: day - string, data - array of objects [{}, {}]\n    function getCategoriesofDay(day, data) {\n        let categories = []\n        data.forEach((item) => {\n            if (item.id === day) {\n                categories = Object.values(item.categories).map((cat) => cat.id)\n            }\n        })\n        return categories\n    }\n\n    // get array of cells of particular category [\"\", \"\"], inputs: category - string, data(category) - array of objects [{}, {}]\n    function getCellsofCategory(category, data) {\n        let cells = []\n        data.forEach((item) => {\n            if (item.id === category) {\n                cells = Object.values(item.cells)\n            }\n        })\n        return cells\n    }\n\n    function cellHappenedToday(cell, defaultDay) {\n        if (daysIds.includes(defaultDay)) {\n            daysValues.forEach((day) => {\n                if (day.id === defaultDay) {\n                    const categoryIds = Object.values(day.categories).map((cat) => cat.id)\n                    if (categoryIds.includes(props.id)) {\n                        const cells = Object.values(day.categories[props.id].cells)\n                        console.log(\"cells\", cells, \"cell\", cell)\n                        if (cells.includes(cell)) {\n                            console.log(cells.includes(cell))\n                            return 1\n                        } else {\n                            return 0\n                        }\n                    } else {\n                        return 0\n                    }\n                } else {\n                    return 0\n                }\n            })\n        } else {\n            return 0\n        }\n    }\n\n    console.log(\"cell\", cellHappenedToday(\"sad\", \"2021-1-2\"))\n    \n    // const options = props.defaultCells.map((cell) => {\n    //     name: cell.name,\n    //     data: defaultDays.map((day) => {\n    //         x: day,\n    //         y: cellHappenedToday(cell, getCellsofCategory(props.id, getCategoriesofDay(day, daysValues)), getCategoriesofDay(day, daysValues), daysIds, day)\n    //     })\n    // })\n\n    return (\n        <div>\n            Chart\n        </div>\n    )\n\n}\n\nexport default CategoryChart\n\n// \n    //console.log(categories)\n\n    // Array of arrays of ids [[\"\", \"\", \"\"], [\"\", \"\", \"\"]]\n    //const categoriesIds = categories.map((category) => category.map((cat) => cat.id))\n    //console.log(categoriesIds)\n\n    // Array of arrays of arrays of cells [[[\"\",\"\"],[\"\",\"\"]],[[\"\",\"\"],[\"\",\"\"]]]\n    //const cells = categories.map((category) => category.map((cat) => cat.cells))\n    //console.log(cells)\n\n    // function getDefaultCell(defaultCells) {\n    //     defaultCells.forEach((cell) => cell.name)\n    // }\n\n    // function cellHappenedToday(cell, cells, category, days, defaultday) {\n    //     if (days.includes(defaultday) && category.includes(props.id) && cells.includes(cell)) {\n    //         return 1\n    //     } else {\n    //         return 0\n    //     }  \n    // }"]},"metadata":{},"sourceType":"module"}