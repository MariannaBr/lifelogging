{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/mana/c/lifelogging/components/CategoryChart.js\",\n    _s = $RefreshSig$();\n\nimport { useSelector } from \"react-redux\"; //import { ApexCharts } from \"apexcharts\"\n\nimport { todayChart } from \"../helpers/todayDate\";\nimport generateDefaultDays from \"../helpers/defaultDays\";\n\nvar selectDays = function selectDays(state) {\n  return state.categories.days;\n};\n\nfunction CategoryChart(props) {\n  _s();\n\n  var days = useSelector(selectDays); // Array of objects [{}, {}]\n\n  var daysValues = Object.values(days); // get array of days' ids [\"\", \"\"], inputs: data - array of objects [{}, {}]\n\n  var daysIds = daysValues.map(function (day) {\n    return day.id;\n  });\n  var defaultDays = generateDefaultDays(new Date(daysIds[1]), new Date(todayChart));\n\n  function cellHappenedToday(cell, defaultDay) {\n    if (daysIds.includes(defaultDay)) {\n      return daysValues.reduce(function (total, day) {\n        // o=daysValues.reduce((total, day) => {...}, 0)\n        if (day.id === defaultDay) {\n          var categoryIds = Object.values(day.categories).map(function (cat) {\n            return cat.id;\n          });\n\n          if (categoryIds.includes(props.id)) {\n            var cells = Object.values(day.categories[props.id].cells);\n            console.log(\"cells\", cells, \"cell\", cell);\n\n            if (cells.includes(cell)) {\n              console.log(cells.includes(cell));\n              return total + 1;\n            } else {\n              return 0;\n            }\n          } else {\n            return 0;\n          }\n        } else {\n          return 0;\n        }\n      }, 0);\n    } else {\n      return 0;\n    }\n  }\n\n  var options = {\n    series: props.defaultCells.map(function (cell) {\n      return {\n        name: cell.name,\n        data: defaultDays.map(function (day) {\n          return {\n            x: day,\n            y: cellHappenedToday(cell, day)\n          };\n        })\n      };\n    })\n  };\n  console.log(options);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Chart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CategoryChart, \"3tzja4VaCyvZFWXqwwNrGY7sHz8=\", false, function () {\n  return [useSelector];\n});\n\n_c = CategoryChart;\nexport default CategoryChart; // \n//console.log(categories)\n// Array of arrays of ids [[\"\", \"\", \"\"], [\"\", \"\", \"\"]]\n//const categoriesIds = categories.map((category) => category.map((cat) => cat.id))\n//console.log(categoriesIds)\n// Array of arrays of arrays of cells [[[\"\",\"\"],[\"\",\"\"]],[[\"\",\"\"],[\"\",\"\"]]]\n//const cells = categories.map((category) => category.map((cat) => cat.cells))\n//console.log(cells)\n// function getDefaultCell(defaultCells) {\n//     defaultCells.forEach((cell) => cell.name)\n// }\n// function cellHappenedToday(cell, cells, category, days, defaultday) {\n//     if (days.includes(defaultday) && category.includes(props.id) && cells.includes(cell)) {\n//         return 1\n//     } else {\n//         return 0\n//     }  \n// }\n// get array of categories of particular day [\"\", \"\"], inputs: day - string, data - array of objects [{}, {}]\n// function getCategoriesofDay(day, data) {\n//     let categories = []\n//     data.forEach((item) => {\n//         if (item.id === day) {\n//             categories = Object.values(item.categories).map((cat) => cat.id)\n//         }\n//     })\n//     return categories\n// }\n// get array of cells of particular category [\"\", \"\"], inputs: category - string, data(category) - array of objects [{}, {}]\n// function getCellsofCategory(category, data) {\n//     let cells = []\n//     data.forEach((item) => {\n//         if (item.id === category) {\n//             cells = Object.values(item.cells)\n//         }\n//     })\n//     return cells\n// }\n//Array of arrays of objects - categories [[{}, {}], [{}, {}]]\n//const categoriesValues = daysValues.map((day) => Object.values(day.categories))\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoryChart\");","map":{"version":3,"sources":["/home/mana/c/lifelogging/components/CategoryChart.js"],"names":["useSelector","todayChart","generateDefaultDays","selectDays","state","categories","days","CategoryChart","props","daysValues","Object","values","daysIds","map","day","id","defaultDays","Date","cellHappenedToday","cell","defaultDay","includes","reduce","total","categoryIds","cat","cells","console","log","options","series","defaultCells","name","data","x","y"],"mappings":"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","sourcesContent":["import { useSelector } from \"react-redux\"\n//import { ApexCharts } from \"apexcharts\"\nimport { todayChart } from \"../helpers/todayDate\"\nimport generateDefaultDays from \"../helpers/defaultDays\"\n\nconst selectDays = state => state.categories.days\n\nfunction CategoryChart(props) {\n    \n    const days = useSelector(selectDays)\n    // Array of objects [{}, {}]\n    const daysValues = Object.values(days)\n\n    // get array of days' ids [\"\", \"\"], inputs: data - array of objects [{}, {}]\n    const daysIds = daysValues.map((day) => day.id)\n\n    const defaultDays = generateDefaultDays(new Date(daysIds[1]), new Date(todayChart))\n\n    function cellHappenedToday(cell, defaultDay) {\n        if (daysIds.includes(defaultDay)) {\n            return daysValues.reduce((total, day) => {  // o=daysValues.reduce((total, day) => {...}, 0)\n                if (day.id === defaultDay) {\n                    const categoryIds = Object.values(day.categories).map((cat) => cat.id)\n                    if (categoryIds.includes(props.id)) {\n                        const cells = Object.values(day.categories[props.id].cells)\n                        console.log(\"cells\", cells, \"cell\", cell)\n                        if (cells.includes(cell)) {\n                            console.log(cells.includes(cell))\n                            return total + 1\n                        } else {\n                            return 0\n                        }\n                    } else {\n                        return 0\n                    }\n                } else {\n                    return 0\n                }\n            }, 0)\n\n        } else {\n            return 0\n        }\n    }\n    \n    const options = {\n        series: \n            props.defaultCells.map((cell) => (\n            {\n                name: cell.name,\n                data: defaultDays.map((day) => (\n                    {\n                        x: day,\n                        y: cellHappenedToday(cell, day)\n                    }\n                ))\n            }\n        ))\n    }\n\n    console.log(options)\n\n    return (\n        <div>\n            Chart\n        </div>\n    )\n}\n\nexport default CategoryChart\n\n// \n    //console.log(categories)\n\n    // Array of arrays of ids [[\"\", \"\", \"\"], [\"\", \"\", \"\"]]\n    //const categoriesIds = categories.map((category) => category.map((cat) => cat.id))\n    //console.log(categoriesIds)\n\n    // Array of arrays of arrays of cells [[[\"\",\"\"],[\"\",\"\"]],[[\"\",\"\"],[\"\",\"\"]]]\n    //const cells = categories.map((category) => category.map((cat) => cat.cells))\n    //console.log(cells)\n\n    // function getDefaultCell(defaultCells) {\n    //     defaultCells.forEach((cell) => cell.name)\n    // }\n\n    // function cellHappenedToday(cell, cells, category, days, defaultday) {\n    //     if (days.includes(defaultday) && category.includes(props.id) && cells.includes(cell)) {\n    //         return 1\n    //     } else {\n    //         return 0\n    //     }  \n    // }\n\n    // get array of categories of particular day [\"\", \"\"], inputs: day - string, data - array of objects [{}, {}]\n    // function getCategoriesofDay(day, data) {\n    //     let categories = []\n    //     data.forEach((item) => {\n    //         if (item.id === day) {\n    //             categories = Object.values(item.categories).map((cat) => cat.id)\n    //         }\n    //     })\n    //     return categories\n    // }\n\n    // get array of cells of particular category [\"\", \"\"], inputs: category - string, data(category) - array of objects [{}, {}]\n    // function getCellsofCategory(category, data) {\n    //     let cells = []\n    //     data.forEach((item) => {\n    //         if (item.id === category) {\n    //             cells = Object.values(item.cells)\n    //         }\n    //     })\n    //     return cells\n    // }\n    //Array of arrays of objects - categories [[{}, {}], [{}, {}]]\n    //const categoriesValues = daysValues.map((day) => Object.values(day.categories))"]},"metadata":{},"sourceType":"module"}