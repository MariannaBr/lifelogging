{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/mana/c/lifelogging/components/CategoryChart.js\";\nimport dynamic from \"next/dynamic\";\nimport chartOptions from \"../helpers/chartOptions\";\nimport generateDefaultDays from \"../helpers/defaultDays\";\nimport { todayChart } from \"../helpers/todayDate\";\nimport { useSelector } from \"react-redux\";\n\nconst selectDays = state => state.categories.days;\n\nconst Chart = dynamic(() => import(\"react-apexcharts\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"react-apexcharts\")],\n    modules: [\"react-apexcharts\"]\n  }\n});\n\nfunction CategoryChart(props) {\n  const storeDays = useSelector(selectDays); // Array of objects [{id:\"\", cells:[]}, {id:\"\", cells:[]}]\n\n  const storeDaysValues = Object.values(storeDays); // get array of days' ids [\"2021-1-1\", \"2021-1-2\"], inputs: data - array of objects [{}, {}]\n\n  const storeDaysIds = storeDaysValues.map(day => day.id); // get array of dates from second day to today [\"2021-1-1\", \"2021-1-2\"]\n\n  const chartDays = generateDefaultDays(new Date(storeDaysIds[0]), new Date(todayChart)); // list of columns to chart filled with 0, every cell chart gets it\n\n  const defaultDatas = chartDays.map(day => {\n    return {\n      x: simplifyDate(day),\n      y: 0\n    };\n  });\n\n  function cellHappenedToday(cell, chartDay) {\n    return storeDaysValues.reduce((total, day) => {\n      if (day.id === chartDay) {\n        const storeCellsIds = Object.values(day.cells);\n\n        if (storeCellsIds.includes(cell)) {\n          return total + 1;\n        }\n      }\n\n      return total;\n    }, 0);\n  } // default chart series, generated for every cell\n\n\n  const defaultSeries = props.defaultCells.map(cell => {\n    return {\n      name: cell.name,\n      data: defaultDatas\n    };\n  });\n  const series = props.defaultCells.map(cell => {\n    return {\n      name: cell.name,\n      data: chartDays.map(day => {\n        return {\n          x: simplifyDate(day),\n          y: cellHappenedToday(cell.name, day)\n        };\n      })\n    };\n  });\n  const chartWidth = (chartDays.length * 15).toString();\n  const chartHeight = (props.defaultCells.length * 50).toString();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `text-lg w-1/5 font-semibold text-${props.color}-400`,\n      children: props.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Chart, {\n        options: chartOptions(props.color),\n        series: defaultSeries,\n        type: \"heatmap\",\n        width: chartWidth,\n        height: chartHeight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n\nexport default CategoryChart;","map":{"version":3,"sources":["/home/mana/c/lifelogging/components/CategoryChart.js"],"names":["dynamic","chartOptions","generateDefaultDays","todayChart","useSelector","selectDays","state","categories","days","Chart","ssr","CategoryChart","props","storeDays","storeDaysValues","Object","values","storeDaysIds","map","day","id","chartDays","Date","defaultDatas","x","simplifyDate","y","cellHappenedToday","cell","chartDay","reduce","total","storeCellsIds","cells","includes","defaultSeries","defaultCells","name","data","series","chartWidth","length","toString","chartHeight","color"],"mappings":"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","sourcesContent":["import dynamic from \"next/dynamic\"\nimport chartOptions from \"../helpers/chartOptions\"\nimport generateDefaultDays from \"../helpers/defaultDays\"\nimport { todayChart } from \"../helpers/todayDate\"\nimport { useSelector } from \"react-redux\"\n\nconst selectDays = state => state.categories.days\nconst Chart = dynamic(() => import (\"react-apexcharts\"), {ssr: false})\n\nfunction CategoryChart(props) {\n\n    const storeDays = useSelector(selectDays)\n\n    // Array of objects [{id:\"\", cells:[]}, {id:\"\", cells:[]}]\n    const storeDaysValues = Object.values(storeDays)\n\n    // get array of days' ids [\"2021-1-1\", \"2021-1-2\"], inputs: data - array of objects [{}, {}]\n    const storeDaysIds = storeDaysValues.map((day) => day.id)\n\n    // get array of dates from second day to today [\"2021-1-1\", \"2021-1-2\"]\n    const chartDays = generateDefaultDays(new Date(storeDaysIds[0]), new Date(todayChart))\n\n    // list of columns to chart filled with 0, every cell chart gets it\n    const defaultDatas = chartDays.map((day) => {\n        return {\n            x: simplifyDate(day),\n            y: 0\n        }\n    })\n\n    function cellHappenedToday(cell, chartDay) {\n        return storeDaysValues.reduce((total, day) => {\n            if (day.id === chartDay) {\n                const storeCellsIds = Object.values(day.cells)\n                if (storeCellsIds.includes(cell)) {\n                    return total + 1\n                }\n            }               \n            return total \n        }, 0)\n    }\n\n    // default chart series, generated for every cell\n    const defaultSeries = props.defaultCells.map((cell) => {\n        return {\n            name: cell.name,\n            data: defaultDatas\n        }\n    })\n\n    const series = props.defaultCells.map((cell) => {\n        return {\n          name: cell.name,\n          data: chartDays.map((day) => {\n              return {\n                  x: simplifyDate(day),\n                  y: cellHappenedToday(cell.name, day)\n              }\n          })\n        }\n      })\n\n    const chartWidth = (chartDays.length*15).toString()\n    const chartHeight = (props.defaultCells.length*50).toString()\n\n    return (\n        <div className=\"flex flex-row\">\n            <div className={`text-lg w-1/5 font-semibold text-${props.color}-400`}>\n                {props.id}\n            </div>\n            <div>\n                <Chart options={chartOptions(props.color)} series={defaultSeries} type=\"heatmap\" width={chartWidth} height={chartHeight}/>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default CategoryChart\n\n"]},"metadata":{},"sourceType":"module"}