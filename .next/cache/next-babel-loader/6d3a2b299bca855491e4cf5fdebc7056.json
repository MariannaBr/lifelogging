{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ADD_DAY, ADD_CATEGORY, ADD_CELL } from \"../actionTypes\";\nimport { today } from \"../../components/Today\";\nlet dayId = today;\nconst initialState = {\n  days: []\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case ADD_CATEGORY:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        days: [...state.days, {\n          dayId: dayId,\n          category: action.payload\n        }]\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/mana/c/lifelogging/redux/reducers/cellReducer.js"],"names":["ADD_DAY","ADD_CATEGORY","ADD_CELL","today","dayId","initialState","days","state","action","type","category","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,EAAkBC,YAAlB,EAAgCC,QAAhC,QAAgD,gBAAhD;AACA,SAAQC,KAAR,QAAoB,wBAApB;AAEA,IAAIC,KAAK,GAAGD,KAAZ;AAEA,MAAME,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AADW,CAArB;AAIA,eAAe,UAASC,KAAK,GAAGF,YAAjB,EAA+BG,MAA/B,EAAuC;AAClD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKR,YAAL;AACI,6CACOM,KADP;AAEID,QAAAA,IAAI,EAAE,CAAC,GAAGC,KAAK,CAACD,IAAV,EACN;AACIF,UAAAA,KAAK,EAAEA,KADX;AAEIM,UAAAA,QAAQ,EAAEF,MAAM,CAACG;AAFrB,SADM;AAFV;;AASJ;AACI,aAAOJ,KAAP;AAZR;AAcH","sourcesContent":["import { ADD_DAY, ADD_CATEGORY, ADD_CELL } from \"../actionTypes\"\nimport {today} from \"../../components/Today\"\n\nlet dayId = today\n\nconst initialState = {\n    days: [],\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case ADD_CATEGORY:\n            return {\n                ...state,\n                days: [...state.days,\n                {\n                    dayId: dayId,\n                    category: action.payload\n                }]\n            }\n\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}