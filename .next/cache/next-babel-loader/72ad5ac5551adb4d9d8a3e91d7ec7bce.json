{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/mana/c/lifelogging/components/CategoryChart.js\";\nimport { useSelector } from \"react-redux\";\nimport Chart from \"react-apexcharts\";\nimport { todayChart } from \"../helpers/todayDate\";\nimport generateDefaultDays from \"../helpers/defaultDays\";\nimport { render, useRef } from \"react-dom\";\n\nconst selectDays = state => state.categories.days;\n\nfunction CategoryChart(props) {\n  const ref = useRef(true);\n  const days = useSelector(selectDays); // Array of objects [{}, {}]\n\n  const daysValues = Object.values(days); // get array of days' ids [\"\", \"\"], inputs: data - array of objects [{}, {}]\n\n  const daysIds = daysValues.map(day => day.id);\n  const defaultDays = generateDefaultDays(new Date(daysIds[1]), new Date(todayChart));\n\n  function cellHappenedToday(cell, defaultDay) {\n    if (daysIds.includes(defaultDay)) {\n      return daysValues.reduce((total, day) => {\n        // o=daysValues.reduce((total, day) => {...}, 0)\n        if (day.id === defaultDay) {\n          const categoryIds = Object.values(day.categories).map(cat => cat.id);\n\n          if (categoryIds.includes(props.id)) {\n            const cells = Object.values(day.categories[props.id].cells);\n            console.log(\"cells\", cells, \"cell\", cell);\n\n            if (cells.includes(cell)) {\n              console.log(cells.includes(cell));\n              return total + 1;\n            } else {\n              return 0;\n            }\n          } else {\n            return 0;\n          }\n        } else {\n          return 0;\n        }\n      }, 0);\n    } else {\n      return 0;\n    }\n  }\n\n  const options = {\n    series: props.defaultCells.map(cell => ({\n      name: cell.name,\n      data: defaultDays.map(day => ({\n        x: day,\n        y: cellHappenedToday(cell, day)\n      }))\n    })),\n    plotOptions: {\n      heatmap: {\n        colorScale: {\n          ranges: [{\n            from: 0,\n            to: 0,\n            color: \"#F9FAFB\"\n          }, {\n            from: 1,\n            to: 1,\n            color: props.color\n          }]\n        }\n      }\n    }\n  }; // var chart = new ApexCharts(ref, options)\n  // chart.render()\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      options: options.plotOptions,\n      series: options.series,\n      type: \"heatmap\",\n      width: \"500\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 13\n  }, this);\n}\n\nexport default CategoryChart; // \n//console.log(categories)\n// Array of arrays of ids [[\"\", \"\", \"\"], [\"\", \"\", \"\"]]\n//const categoriesIds = categories.map((category) => category.map((cat) => cat.id))\n//console.log(categoriesIds)\n// Array of arrays of arrays of cells [[[\"\",\"\"],[\"\",\"\"]],[[\"\",\"\"],[\"\",\"\"]]]\n//const cells = categories.map((category) => category.map((cat) => cat.cells))\n//console.log(cells)\n// function getDefaultCell(defaultCells) {\n//     defaultCells.forEach((cell) => cell.name)\n// }\n// function cellHappenedToday(cell, cells, category, days, defaultday) {\n//     if (days.includes(defaultday) && category.includes(props.id) && cells.includes(cell)) {\n//         return 1\n//     } else {\n//         return 0\n//     }  \n// }\n// get array of categories of particular day [\"\", \"\"], inputs: day - string, data - array of objects [{}, {}]\n// function getCategoriesofDay(day, data) {\n//     let categories = []\n//     data.forEach((item) => {\n//         if (item.id === day) {\n//             categories = Object.values(item.categories).map((cat) => cat.id)\n//         }\n//     })\n//     return categories\n// }\n// get array of cells of particular category [\"\", \"\"], inputs: category - string, data(category) - array of objects [{}, {}]\n// function getCellsofCategory(category, data) {\n//     let cells = []\n//     data.forEach((item) => {\n//         if (item.id === category) {\n//             cells = Object.values(item.cells)\n//         }\n//     })\n//     return cells\n// }\n//Array of arrays of objects - categories [[{}, {}], [{}, {}]]\n//const categoriesValues = daysValues.map((day) => Object.values(day.categories))","map":{"version":3,"sources":["/home/mana/c/lifelogging/components/CategoryChart.js"],"names":["useSelector","Chart","todayChart","generateDefaultDays","render","useRef","selectDays","state","categories","days","CategoryChart","props","ref","daysValues","Object","values","daysIds","map","day","id","defaultDays","Date","cellHappenedToday","cell","defaultDay","includes","reduce","total","categoryIds","cat","cells","console","log","options","series","defaultCells","name","data","x","y","plotOptions","heatmap","colorScale","ranges","from","to","color"],"mappings":"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","sourcesContent":["import { useSelector } from \"react-redux\"\nimport Chart from \"react-apexcharts\"\nimport { todayChart } from \"../helpers/todayDate\"\nimport generateDefaultDays from \"../helpers/defaultDays\"\nimport { render, useRef } from \"react-dom\"\n\nconst selectDays = state => state.categories.days\n\nfunction CategoryChart(props) {\n    \n    const ref = useRef(true)\n    const days = useSelector(selectDays)\n    // Array of objects [{}, {}]\n    const daysValues = Object.values(days)\n\n    // get array of days' ids [\"\", \"\"], inputs: data - array of objects [{}, {}]\n    const daysIds = daysValues.map((day) => day.id)\n\n    const defaultDays = generateDefaultDays(new Date(daysIds[1]), new Date(todayChart))\n\n    function cellHappenedToday(cell, defaultDay) {\n        if (daysIds.includes(defaultDay)) {\n            return daysValues.reduce((total, day) => {  // o=daysValues.reduce((total, day) => {...}, 0)\n                if (day.id === defaultDay) {\n                    const categoryIds = Object.values(day.categories).map((cat) => cat.id)\n                    if (categoryIds.includes(props.id)) {\n                        const cells = Object.values(day.categories[props.id].cells)\n                        console.log(\"cells\", cells, \"cell\", cell)\n                        if (cells.includes(cell)) {\n                            console.log(cells.includes(cell))\n                            return total + 1\n                        } else {\n                            return 0\n                        }\n                    } else {\n                        return 0\n                    }\n                } else {\n                    return 0\n                }\n            }, 0)\n\n        } else {\n            return 0\n        }\n    }\n    \n    const options = {\n        series: \n            props.defaultCells.map((cell) => (\n            {\n                name: cell.name,\n                data: defaultDays.map((day) => (\n                    {\n                        x: day,\n                        y: cellHappenedToday(cell, day)\n                    }\n                ))\n            }\n        )),\n        plotOptions: {\n            heatmap: {\n                colorScale: {\n                    ranges: [{\n                        from: 0,\n                        to: 0,\n                        color: \"#F9FAFB\"\n                    }, {\n                        from: 1,\n                        to: 1,\n                        color: props.color\n                    }]\n                }\n            }\n        }\n    }\n\n    // var chart = new ApexCharts(ref, options)\n    // chart.render()\n        return (\n            <div>\n                <Chart options={options.plotOptions} series={options.series} type=\"heatmap\" width=\"500\"/>\n            </div>\n        )\n}\n\nexport default CategoryChart\n\n// \n    //console.log(categories)\n\n    // Array of arrays of ids [[\"\", \"\", \"\"], [\"\", \"\", \"\"]]\n    //const categoriesIds = categories.map((category) => category.map((cat) => cat.id))\n    //console.log(categoriesIds)\n\n    // Array of arrays of arrays of cells [[[\"\",\"\"],[\"\",\"\"]],[[\"\",\"\"],[\"\",\"\"]]]\n    //const cells = categories.map((category) => category.map((cat) => cat.cells))\n    //console.log(cells)\n\n    // function getDefaultCell(defaultCells) {\n    //     defaultCells.forEach((cell) => cell.name)\n    // }\n\n    // function cellHappenedToday(cell, cells, category, days, defaultday) {\n    //     if (days.includes(defaultday) && category.includes(props.id) && cells.includes(cell)) {\n    //         return 1\n    //     } else {\n    //         return 0\n    //     }  \n    // }\n\n    // get array of categories of particular day [\"\", \"\"], inputs: day - string, data - array of objects [{}, {}]\n    // function getCategoriesofDay(day, data) {\n    //     let categories = []\n    //     data.forEach((item) => {\n    //         if (item.id === day) {\n    //             categories = Object.values(item.categories).map((cat) => cat.id)\n    //         }\n    //     })\n    //     return categories\n    // }\n\n    // get array of cells of particular category [\"\", \"\"], inputs: category - string, data(category) - array of objects [{}, {}]\n    // function getCellsofCategory(category, data) {\n    //     let cells = []\n    //     data.forEach((item) => {\n    //         if (item.id === category) {\n    //             cells = Object.values(item.cells)\n    //         }\n    //     })\n    //     return cells\n    // }\n    //Array of arrays of objects - categories [[{}, {}], [{}, {}]]\n    //const categoriesValues = daysValues.map((day) => Object.values(day.categories))"]},"metadata":{},"sourceType":"module"}