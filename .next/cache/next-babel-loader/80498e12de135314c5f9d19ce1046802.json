{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ADD_DAY, ADD_CATEGORY, ADD_CELL } from \"../actionTypes\";\nconst initialState = {\n  categories: [],\n  category: {}\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case ADD_CATEGORY:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        categories: [...state.categories, {\n          category: action.payload\n        }]\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/mana/c/lifelogging/redux/reducers/cellReducer.js"],"names":["ADD_DAY","ADD_CATEGORY","ADD_CELL","initialState","categories","category","state","action","type","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,EAAkBC,YAAlB,EAAgCC,QAAhC,QAAgD,gBAAhD;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,EADK;AAEjBC,EAAAA,QAAQ,EAAE;AAFO,CAArB;AAKA,eAAe,UAASC,KAAK,GAAGH,YAAjB,EAA+BI,MAA/B,EAAuC;AAClD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKP,YAAL;AACI,6CACOK,KADP;AAEIF,QAAAA,UAAU,EAAE,CAAC,GAAGE,KAAK,CAACF,UAAV,EACZ;AACIC,UAAAA,QAAQ,EAAEE,MAAM,CAACE;AADrB,SADY;AAFhB;;AAQJ;AACI,aAAOH,KAAP;AAXR;AAaH","sourcesContent":["import { ADD_DAY, ADD_CATEGORY, ADD_CELL } from \"../actionTypes\"\n\nconst initialState = {\n    categories: [],\n    category: {}\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case ADD_CATEGORY:\n            return {\n                ...state,\n                categories: [...state.categories,\n                {\n                    category: action.payload\n                }]\n            }\n\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}