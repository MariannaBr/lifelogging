{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var getCellState = function getCellState(store) {\n  return store.cells;\n};\nexport var getCategory = function getCategory(store) {\n  return getCellState(store) ? getCellState(store).cells : [];\n};\nexport var getCellByName = function getCellByName(store, name) {\n  return getCellState(store) ? _objectSpread(_objectSpread({}, getCellState(store).cell[name]), {}, {\n    name: name\n  }) : {};\n};\nexport var getCells = function getCells(store) {\n  return getCategory(store).map(function (name) {\n    return getCellByName(store, name);\n  });\n};","map":null,"metadata":{},"sourceType":"module"}