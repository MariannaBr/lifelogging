{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/mana/c/lifelogging/components/CategoryChart.js\";\nimport { useSelector } from \"react-redux\"; //import { ApexCharts } from \"apexcharts\"\n\nimport { todayChart } from \"../helpers/todayDate\";\n\nconst selectDays = state => state.categories.days;\n\nfunction CategoryChart(props) {\n  const days = useSelector(selectDays); // Array of objects [{}, {}]\n\n  const daysValues = Object.values(days); // get array of days' ids [\"\", \"\"], inputs: data - array of objects [{}, {}]\n\n  const daysIds = daysValues.map(day => day.id);\n\n  function generateDefaultDays(firstDay, today) {\n    for (var defaultDays = [], dt = new Date(firstDay); dt <= today; dt.setDate(dt.getDate() + 1)) {\n      defaultDays.push(new Date(dt));\n    }\n\n    const days = defaultDays.map(day => day.getDate().toString() + \".\" + (day.getMonth() + 1).toString() + \".\");\n    return days;\n  }\n\n  const defaultDays = generateDefaultDays(new Date(daysIds[1]), new Date(todayChart)); /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // get array of categories of particular day [\"\", \"\"], inputs: day - string, data - array of objects [{}, {}]\n\n  function getCategoriesofDay(day, data) {\n    let categories = [];\n    data.forEach(item => {\n      if (item.id === day) {\n        categories = Object.values(item.categories).map(cat => cat.id);\n      }\n    });\n    return categories;\n  } // get array of cells of particular category [\"\", \"\"], inputs: day - string, category - string, data(category) - array of objects [{}, {}]\n\n\n  function getCellsofCategory(category, data) {\n    let cells = [];\n    data.forEach(item => {\n      if (item.id === category) {\n        cells = Object.values(item.cells);\n      }\n    });\n    return cells;\n  } // Array of arrays of objects - categories [[{}, {}], [{}, {}]]\n  //const categoriesValues = daysValues.map((day) => Object.values(day.categories))\n  //console.log(categories)\n  // Array of arrays of ids [[\"\", \"\", \"\"], [\"\", \"\", \"\"]]\n  //const categoriesIds = categories.map((category) => category.map((cat) => cat.id))\n  //console.log(categoriesIds)\n  // Array of arrays of arrays of cells [[[\"\",\"\"],[\"\",\"\"]],[[\"\",\"\"],[\"\",\"\"]]]\n  //const cells = categories.map((category) => category.map((cat) => cat.cells))\n  //console.log(cells)\n  // function getDefaultCell(defaultCells) {\n  //     defaultCells.forEach((cell) => cell.name)\n  // }\n\n\n  function cellHappenedToday(cell, cells, category, days, defaultday) {\n    if (days.includes(defaultday) && category.includes(props.id) && cells.includes(cell)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  cellHappenedToday(\"happy\", getCellsofCategory(props.id, getCategoriesofDay(daysIds[1], daysValues)), getCategoriesofDay(daysIds[1], daysValues), daysIds, daysIds[1]); // const options = props.defaultCells.map((cell) => {\n  //     name: cell.name,\n  //     data: defaultDays.map((day) => {\n  //         x: day,\n  //         y: cellHappenedToday(cell, getCellsofCategory(props.id, getCategoriesofDay(day, daysValues)), getCategoriesofDay(day, daysValues), daysIds, day)\n  //     })\n  // })\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Chart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n\nexport default CategoryChart;","map":{"version":3,"sources":["/home/mana/c/lifelogging/components/CategoryChart.js"],"names":["useSelector","todayChart","selectDays","state","categories","days","CategoryChart","props","daysValues","Object","values","daysIds","map","day","id","generateDefaultDays","firstDay","today","defaultDays","dt","Date","setDate","getDate","push","toString","getMonth","getCategoriesofDay","data","forEach","item","cat","getCellsofCategory","category","cells","cellHappenedToday","cell","defaultday","includes"],"mappings":"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","sourcesContent":["import { useSelector } from \"react-redux\"\n//import { ApexCharts } from \"apexcharts\"\nimport { todayChart } from \"../helpers/todayDate\"\n\nconst selectDays = state => state.categories.days\n\nfunction CategoryChart(props) {\n    \n    const days = useSelector(selectDays)\n    // Array of objects [{}, {}]\n    const daysValues = Object.values(days)\n\n    // get array of days' ids [\"\", \"\"], inputs: data - array of objects [{}, {}]\n    const daysIds = daysValues.map((day) => day.id)\n\n    function generateDefaultDays(firstDay, today) {\n        for (var defaultDays=[], dt=new Date(firstDay); dt<=today; dt.setDate(dt.getDate()+1)) {\n            defaultDays.push(new Date(dt))\n        }\n        const days = defaultDays.map((day) => (day.getDate()).toString() + \".\" + (day.getMonth()+1).toString() + \".\" )\n        return days\n    }\n\n    const defaultDays = generateDefaultDays(new Date(daysIds[1]), new Date(todayChart))\n \n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    // get array of categories of particular day [\"\", \"\"], inputs: day - string, data - array of objects [{}, {}]\n    function getCategoriesofDay(day, data) {\n        let categories = []\n        data.forEach((item) => {\n            if (item.id === day) {\n                categories = Object.values(item.categories).map((cat) => cat.id)\n            }\n        })\n        return categories\n    }\n\n    // get array of cells of particular category [\"\", \"\"], inputs: day - string, category - string, data(category) - array of objects [{}, {}]\n    function getCellsofCategory(category, data) {\n        let cells = []\n        data.forEach((item) => {\n            if (item.id === category) {\n                cells = Object.values(item.cells)\n            }\n        })\n        return cells\n    }\n\n    // Array of arrays of objects - categories [[{}, {}], [{}, {}]]\n    //const categoriesValues = daysValues.map((day) => Object.values(day.categories))\n    //console.log(categories)\n\n    // Array of arrays of ids [[\"\", \"\", \"\"], [\"\", \"\", \"\"]]\n    //const categoriesIds = categories.map((category) => category.map((cat) => cat.id))\n    //console.log(categoriesIds)\n\n    // Array of arrays of arrays of cells [[[\"\",\"\"],[\"\",\"\"]],[[\"\",\"\"],[\"\",\"\"]]]\n    //const cells = categories.map((category) => category.map((cat) => cat.cells))\n    //console.log(cells)\n\n    // function getDefaultCell(defaultCells) {\n    //     defaultCells.forEach((cell) => cell.name)\n    // }\n\n    function cellHappenedToday(cell, cells, category, days, defaultday) {\n        if (days.includes(defaultday) && category.includes(props.id) && cells.includes(cell)) {\n            return 1\n        } else {\n            return 0\n        }  \n    }\n\n    cellHappenedToday(\"happy\", getCellsofCategory(props.id, getCategoriesofDay(daysIds[1], daysValues)), getCategoriesofDay(daysIds[1], daysValues), daysIds, daysIds[1])\n    \n    // const options = props.defaultCells.map((cell) => {\n    //     name: cell.name,\n    //     data: defaultDays.map((day) => {\n    //         x: day,\n    //         y: cellHappenedToday(cell, getCellsofCategory(props.id, getCategoriesofDay(day, daysValues)), getCategoriesofDay(day, daysValues), daysIds, day)\n    //     })\n    // })\n\n    return (\n        <div>\n            Chart\n        </div>\n    )\n\n}\n\nexport default CategoryChart"]},"metadata":{},"sourceType":"module"}