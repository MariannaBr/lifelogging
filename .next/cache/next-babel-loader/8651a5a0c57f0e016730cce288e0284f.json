{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/mana/c/lifelogging/components/CategoryChart.js\";\nimport dynamic from \"next/dynamic\";\nimport chartOptions from \"../helpers/chartOptions\";\nimport { useSelector } from \"react-redux\";\nconst Chart = dynamic(() => import(\"react-apexcharts\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"react-apexcharts\")],\n    modules: [\"react-apexcharts\"]\n  }\n});\n\nfunction CategoryChart(props) {\n  // default chart series, generated for every cell\n  const defaultSeries = props.defaultCells.map(cell => {\n    return {\n      name: cell.name,\n      data: props.defaultDatas\n    };\n  });\n  const chartWidth = (props.chartDays.length * 15).toString();\n  const chartHeight = (props.defaultCells.length * 50).toString();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `text-lg w-1/5 font-semibold text-${props.color}-400`,\n      children: props.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Chart, {\n        options: chartOptions(props.color),\n        series: defaultSeries,\n        type: \"heatmap\",\n        width: chartWidth,\n        height: chartHeight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n\nexport default CategoryChart; // const series = props.defaultCells.map((cell) => {\n//     return {\n//       name: cell.name,\n//       data: chartDays.map((day) => {\n//           return {\n//               x: simplifyDate(day),\n//               y: cellHappenedToday(cell.name, day)\n//           }\n//       })\n//     }\n//   })\n// function cellHappenedToday(cell, chartDay) {\n//     return storeDaysValues.reduce((total, day) => {\n//         if (day.id === chartDay) {\n//             const storeCellsIds = Object.values(day.cells)\n//             if (storeCellsIds.includes(cell)) {\n//                 return total + 1\n//             }\n//         }               \n//         return total \n//     }, 0)\n// }","map":{"version":3,"sources":["/home/mana/c/lifelogging/components/CategoryChart.js"],"names":["dynamic","chartOptions","useSelector","Chart","ssr","CategoryChart","props","defaultSeries","defaultCells","map","cell","name","data","defaultDatas","chartWidth","chartDays","length","toString","chartHeight","color","id"],"mappings":";;AAAA,OAAOA,OAAP,MAAoB,cAApB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,MAAMC,KAAK,GAAGH,OAAO,CAAC,MAAM,OAAQ,kBAAR,CAAP,EAAoC;AAACI,EAAAA,GAAG,EAAE,KAAN;AAAA;AAAA,wCAArB,kBAAqB;AAAA,cAArB,kBAAqB;AAAA;AAAA,CAApC,CAArB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAE1B;AACA,QAAMC,aAAa,GAAGD,KAAK,CAACE,YAAN,CAAmBC,GAAnB,CAAwBC,IAAD,IAAU;AACnD,WAAO;AACHC,MAAAA,IAAI,EAAED,IAAI,CAACC,IADR;AAEHC,MAAAA,IAAI,EAAEN,KAAK,CAACO;AAFT,KAAP;AAIH,GALqB,CAAtB;AAOA,QAAMC,UAAU,GAAG,CAACR,KAAK,CAACS,SAAN,CAAgBC,MAAhB,GAAuB,EAAxB,EAA4BC,QAA5B,EAAnB;AACA,QAAMC,WAAW,GAAG,CAACZ,KAAK,CAACE,YAAN,CAAmBQ,MAAnB,GAA0B,EAA3B,EAA+BC,QAA/B,EAApB;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAG,oCAAmCX,KAAK,CAACa,KAAM,MAAhE;AAAA,gBACKb,KAAK,CAACc;AADX;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAA,6BACI,QAAC,KAAD;AAAO,QAAA,OAAO,EAAEnB,YAAY,CAACK,KAAK,CAACa,KAAP,CAA5B;AAA2C,QAAA,MAAM,EAAEZ,aAAnD;AAAkE,QAAA,IAAI,EAAC,SAAvE;AAAiF,QAAA,KAAK,EAAEO,UAAxF;AAAoG,QAAA,MAAM,EAAEI;AAA5G;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;AAED,eAAeb,aAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import dynamic from \"next/dynamic\"\nimport chartOptions from \"../helpers/chartOptions\"\nimport { useSelector } from \"react-redux\"\n\nconst Chart = dynamic(() => import (\"react-apexcharts\"), {ssr: false})\n\nfunction CategoryChart(props) {\n\n    // default chart series, generated for every cell\n    const defaultSeries = props.defaultCells.map((cell) => {\n        return {\n            name: cell.name,\n            data: props.defaultDatas\n        }\n    })\n\n    const chartWidth = (props.chartDays.length*15).toString()\n    const chartHeight = (props.defaultCells.length*50).toString()\n\n    return (\n        <div className=\"flex flex-row\">\n            <div className={`text-lg w-1/5 font-semibold text-${props.color}-400`}>\n                {props.id}\n            </div>\n            <div>\n                <Chart options={chartOptions(props.color)} series={defaultSeries} type=\"heatmap\" width={chartWidth} height={chartHeight}/>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default CategoryChart\n\n// const series = props.defaultCells.map((cell) => {\n//     return {\n//       name: cell.name,\n//       data: chartDays.map((day) => {\n//           return {\n//               x: simplifyDate(day),\n//               y: cellHappenedToday(cell.name, day)\n//           }\n//       })\n//     }\n//   })\n\n// function cellHappenedToday(cell, chartDay) {\n//     return storeDaysValues.reduce((total, day) => {\n//         if (day.id === chartDay) {\n//             const storeCellsIds = Object.values(day.cells)\n//             if (storeCellsIds.includes(cell)) {\n//                 return total + 1\n//             }\n//         }               \n//         return total \n//     }, 0)\n// }\n\n"]},"metadata":{},"sourceType":"module"}