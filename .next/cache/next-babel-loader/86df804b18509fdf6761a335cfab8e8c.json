{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/mana/c/lifelogging/components/CategoryChart.js\";\nimport { useSelector } from \"react-redux\";\nimport dynamic from \"next/dynamic\";\nimport { todayChart } from \"../helpers/todayDate\";\nimport generateDefaultDays from \"../helpers/defaultDays\";\nimport chartOptions from \"../helpers/chartOptions\";\n\nconst selectDays = state => state.categories.days;\n\nconst Chart = dynamic(() => import(\"react-apexcharts\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"react-apexcharts\")],\n    modules: [\"react-apexcharts\"]\n  }\n});\n\nfunction CategoryChart(props) {\n  const days = useSelector(selectDays); // Array of objects [{}, {}]\n\n  const daysValues = Object.values(days); // get array of days' ids [\"2021-1-1\", \"2021-1-2\"], inputs: data - array of objects [{}, {}]\n\n  const daysIds = daysValues.map(day => day.id); // get array of dates from second day to today [\"2021-1-1\", \"2021-1-2\"]\n\n  const defaultDays = generateDefaultDays(new Date(daysIds[0]), new Date(todayChart));\n\n  function cellHappenedToday(cell, defaultDay) {\n    if (daysIds.includes(defaultDay)) {\n      return daysValues.reduce((total, day) => {\n        if (day.id === defaultDay) {\n          const categoryIds = Object.values(day.categories).map(cat => cat.id);\n\n          if (categoryIds.includes(props.id)) {\n            const cells = Object.values(day.categories[props.id].cells);\n\n            if (cells.includes(cell)) {\n              return total + 1;\n            }\n          }\n        }\n\n        return total;\n      }, 0);\n    } else {\n      return 0;\n    }\n  }\n\n  const series = props.defaultCells.map(cell => {\n    return {\n      name: cell.name,\n      data: defaultDays.map(day => {\n        return {\n          x: day,\n          y: cellHappenedToday(cell.name, day)\n        };\n      })\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      options: chartOptions(props.color),\n      series: series,\n      type: \"heatmap\",\n      width: \"400\",\n      height: \"400\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n\nexport default CategoryChart;","map":{"version":3,"sources":["/home/mana/c/lifelogging/components/CategoryChart.js"],"names":["useSelector","dynamic","todayChart","generateDefaultDays","chartOptions","selectDays","state","categories","days","Chart","ssr","CategoryChart","props","daysValues","Object","values","daysIds","map","day","id","defaultDays","Date","cellHappenedToday","cell","defaultDay","includes","reduce","total","categoryIds","cat","cells","series","defaultCells","name","data","x","y","color"],"mappings":"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","sourcesContent":["import { useSelector } from \"react-redux\"\nimport dynamic from \"next/dynamic\"\nimport { todayChart } from \"../helpers/todayDate\"\nimport generateDefaultDays from \"../helpers/defaultDays\"\nimport chartOptions from \"../helpers/chartOptions\"\n\nconst selectDays = state => state.categories.days\nconst Chart = dynamic(() => import (\"react-apexcharts\"), {ssr: false})\n\nfunction CategoryChart(props) {\n    \n    const days = useSelector(selectDays)\n    // Array of objects [{}, {}]\n    const daysValues = Object.values(days)\n\n    // get array of days' ids [\"2021-1-1\", \"2021-1-2\"], inputs: data - array of objects [{}, {}]\n    const daysIds = daysValues.map((day) => day.id)\n\n    // get array of dates from second day to today [\"2021-1-1\", \"2021-1-2\"]\n    const defaultDays = generateDefaultDays(new Date(daysIds[0]), new Date(todayChart))\n\n    function cellHappenedToday(cell, defaultDay) {\n        if (daysIds.includes(defaultDay)) {\n            return daysValues.reduce((total, day) => {\n                if (day.id === defaultDay) {\n                    const categoryIds = Object.values(day.categories).map((cat) => cat.id)\n                    if (categoryIds.includes(props.id)) {\n                        const cells = Object.values(day.categories[props.id].cells)\n                        if (cells.includes(cell)) {\n                            return total + 1\n                        }\n                    }\n                }                \n                return total \n            }, 0)\n        } else {\n            return 0\n        }\n    }\n\n    const series = props.defaultCells.map((cell) => {\n        return {\n          name: cell.name,\n          data: defaultDays.map((day) => {\n              return {\n                  x: day,\n                  y: cellHappenedToday(cell.name, day)\n              }\n          })\n        }\n      })\n\n    return (\n        <div>\n            <Chart options={chartOptions(props.color)} series={series} type=\"heatmap\" width=\"400\" height=\"400\"/>\n        </div>\n    )\n}\n\nexport default CategoryChart\n\n"]},"metadata":{},"sourceType":"module"}