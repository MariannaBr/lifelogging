{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/mana/c/lifelogging/components/CategoryChart.js\";\nimport { useSelector } from \"react-redux\";\nimport dynamic from \"next/dynamic\";\nimport { todayChart } from \"../helpers/todayDate\";\nimport generateDefaultDays from \"../helpers/defaultDays\";\n\nconst selectDays = state => state.categories.days;\n\nconst Chart = dynamic(() => import(\"react-apexcharts\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"react-apexcharts\")],\n    modules: [\"react-apexcharts\"]\n  }\n});\n\nfunction CategoryChart(props) {\n  const days = useSelector(selectDays); // Array of objects [{}, {}]\n\n  const daysValues = Object.values(days); // get array of days' ids [\"2021-1-1\", \"2021-1-2\"], inputs: data - array of objects [{}, {}]\n\n  const daysIds = daysValues.map(day => day.id); // get array of dates from second day to today [\"2021-1-1\", \"2021-1-2\"]\n\n  const defaultDays = generateDefaultDays(new Date(daysIds[1]), new Date(todayChart));\n\n  function cellHappenedToday(cell, defaultDay) {\n    if (daysIds.includes(defaultDay)) {\n      return daysValues.reduce((total, day) => {\n        if (day.id === defaultDay) {\n          const categoryIds = Object.values(day.categories).map(cat => cat.id);\n\n          if (categoryIds.includes(props.id)) {\n            const cells = Object.values(day.categories[props.id].cells);\n\n            if (cells.includes(cell)) {\n              return total + 1;\n            }\n          }\n        }\n\n        return 0;\n      }, 0);\n    } else {\n      return 0;\n    }\n  }\n\n  const currentSeries = [];\n  const series = props.defaultCells.map(cell => ({\n    name: cell.name,\n    data: defaultDays.map(day => ({\n      x: day,\n      y: console.log(cellHappenedToday(cell.name, day))\n    }))\n  }));\n  series.map(s => {\n    const data = s.data.map(d => {\n      return {\n        x: d,\n        y: cellHappenedToday(s.name, d)\n      };\n    });\n    currentSeries.push({\n      data,\n      name: s.name\n    });\n  });\n  const plotOptions = {\n    heatmap: {\n      colorScale: {\n        ranges: [{\n          from: 0,\n          to: 0,\n          color: \"#F9FAFB\"\n        }, {\n          from: 1,\n          to: 1,\n          color: props.color\n        }]\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      options: plotOptions,\n      series: currentSeries,\n      type: \"heatmap\",\n      width: \"500\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n\nexport default CategoryChart; // Array of arrays of ids [[\"\", \"\", \"\"], [\"\", \"\", \"\"]]\n//const categoriesIds = categories.map((category) => category.map((cat) => cat.id))\n//console.log(categoriesIds)\n// Array of arrays of arrays of cells [[[\"\",\"\"],[\"\",\"\"]],[[\"\",\"\"],[\"\",\"\"]]]\n//const cells = categories.map((category) => category.map((cat) => cat.cells))\n//console.log(cells)\n// function getDefaultCell(defaultCells) {\n//     defaultCells.forEach((cell) => cell.name)\n// }\n// function cellHappenedToday(cell, cells, category, days, defaultday) {\n//     if (days.includes(defaultday) && category.includes(props.id) && cells.includes(cell)) {\n//         return 1\n//     } else {\n//         return 0\n//     }  \n// }\n// get array of categories of particular day [\"\", \"\"], inputs: day - string, data - array of objects [{}, {}]\n// function getCategoriesofDay(day, data) {\n//     let categories = []\n//     data.forEach((item) => {\n//         if (item.id === day) {\n//             categories = Object.values(item.categories).map((cat) => cat.id)\n//         }\n//     })\n//     return categories\n// }\n// get array of cells of particular category [\"\", \"\"], inputs: category - string, data(category) - array of objects [{}, {}]\n// function getCellsofCategory(category, data) {\n//     let cells = []\n//     data.forEach((item) => {\n//         if (item.id === category) {\n//             cells = Object.values(item.cells)\n//         }\n//     })\n//     return cells\n// }\n//Array of arrays of objects - categories [[{}, {}], [{}, {}]]\n//const categoriesValues = daysValues.map((day) => Object.values(day.categories))\n// const options = {\n//     series: \n//         props.defaultCells.map((cell) => (\n//         {\n//             name: cell.name,\n//             data: defaultDays.map((day) => (\n//                 {\n//                     x: day,\n//                     y: console.log(cellHappenedToday(cell.name, day))\n//                 }\n//             ))\n//         }\n//     )),\n//     plotOptions: {\n//         heatmap: {\n//             colorScale: {\n//                 ranges: [{\n//                     from: 0,\n//                     to: 0,\n//                     color: \"#F9FAFB\"\n//                 }, {\n//                     from: 1,\n//                     to: 1,\n//                     color: props.color\n//                 }]\n//             }\n//         }\n//     }\n// }","map":{"version":3,"sources":["/home/mana/c/lifelogging/components/CategoryChart.js"],"names":["useSelector","dynamic","todayChart","generateDefaultDays","selectDays","state","categories","days","Chart","ssr","CategoryChart","props","daysValues","Object","values","daysIds","map","day","id","defaultDays","Date","cellHappenedToday","cell","defaultDay","includes","reduce","total","categoryIds","cat","cells","currentSeries","series","defaultCells","name","data","x","y","console","log","s","d","push","plotOptions","heatmap","colorScale","ranges","from","to","color"],"mappings":"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","sourcesContent":["import { useSelector } from \"react-redux\"\nimport dynamic from \"next/dynamic\"\nimport { todayChart } from \"../helpers/todayDate\"\nimport generateDefaultDays from \"../helpers/defaultDays\"\n\nconst selectDays = state => state.categories.days\nconst Chart = dynamic(() => import (\"react-apexcharts\"), {ssr: false})\n\nfunction CategoryChart(props) {\n    \n    const days = useSelector(selectDays)\n    // Array of objects [{}, {}]\n    const daysValues = Object.values(days)\n\n    // get array of days' ids [\"2021-1-1\", \"2021-1-2\"], inputs: data - array of objects [{}, {}]\n    const daysIds = daysValues.map((day) => day.id)\n\n    // get array of dates from second day to today [\"2021-1-1\", \"2021-1-2\"]\n    const defaultDays = generateDefaultDays(new Date(daysIds[1]), new Date(todayChart))\n\n    function cellHappenedToday(cell, defaultDay) {\n        if (daysIds.includes(defaultDay)) {\n            return daysValues.reduce((total, day) => {\n                if (day.id === defaultDay) {\n                    const categoryIds = Object.values(day.categories).map((cat) => cat.id)\n                    if (categoryIds.includes(props.id)) {\n                        const cells = Object.values(day.categories[props.id].cells)\n                        if (cells.includes(cell)) {\n                            return total + 1\n                        }\n                    }\n                }                \n                return 0 \n            }, 0)\n\n        } else {\n            return 0\n        }\n    }\n\n\n    const currentSeries = []\n\n    const series = props.defaultCells.map((cell) => (\n        {\n            name: cell.name,\n            data: defaultDays.map((day) => (\n                {\n                    x: day,\n                    y: console.log(cellHappenedToday(cell.name, day))\n                }\n            ))\n        }\n    ))\n\n    series.map((s) => {\n        const data = s.data.map((d) => {\n            return {x: d, y: cellHappenedToday(s.name, d)}\n        })\n        currentSeries.push({data, name:s.name})\n    })\n\n    const plotOptions = {\n        heatmap: {\n            colorScale: {\n                ranges: [{\n                    from: 0,\n                    to: 0,\n                    color: \"#F9FAFB\"\n                }, {\n                    from: 1,\n                    to: 1,\n                    color: props.color\n                }]\n            }\n        }\n    }\n\n    return (\n        <div>\n            <Chart options={plotOptions} series={currentSeries} type=\"heatmap\" width=\"500\"/>\n        </div>\n    )\n}\n\nexport default CategoryChart\n\n\n    // Array of arrays of ids [[\"\", \"\", \"\"], [\"\", \"\", \"\"]]\n    //const categoriesIds = categories.map((category) => category.map((cat) => cat.id))\n    //console.log(categoriesIds)\n\n    // Array of arrays of arrays of cells [[[\"\",\"\"],[\"\",\"\"]],[[\"\",\"\"],[\"\",\"\"]]]\n    //const cells = categories.map((category) => category.map((cat) => cat.cells))\n    //console.log(cells)\n\n    // function getDefaultCell(defaultCells) {\n    //     defaultCells.forEach((cell) => cell.name)\n    // }\n\n    // function cellHappenedToday(cell, cells, category, days, defaultday) {\n    //     if (days.includes(defaultday) && category.includes(props.id) && cells.includes(cell)) {\n    //         return 1\n    //     } else {\n    //         return 0\n    //     }  \n    // }\n\n    // get array of categories of particular day [\"\", \"\"], inputs: day - string, data - array of objects [{}, {}]\n    // function getCategoriesofDay(day, data) {\n    //     let categories = []\n    //     data.forEach((item) => {\n    //         if (item.id === day) {\n    //             categories = Object.values(item.categories).map((cat) => cat.id)\n    //         }\n    //     })\n    //     return categories\n    // }\n\n    // get array of cells of particular category [\"\", \"\"], inputs: category - string, data(category) - array of objects [{}, {}]\n    // function getCellsofCategory(category, data) {\n    //     let cells = []\n    //     data.forEach((item) => {\n    //         if (item.id === category) {\n    //             cells = Object.values(item.cells)\n    //         }\n    //     })\n    //     return cells\n    // }\n    //Array of arrays of objects - categories [[{}, {}], [{}, {}]]\n    //const categoriesValues = daysValues.map((day) => Object.values(day.categories))\n\n\n    // const options = {\n    //     series: \n    //         props.defaultCells.map((cell) => (\n    //         {\n    //             name: cell.name,\n    //             data: defaultDays.map((day) => (\n    //                 {\n    //                     x: day,\n    //                     y: console.log(cellHappenedToday(cell.name, day))\n    //                 }\n    //             ))\n    //         }\n    //     )),\n    //     plotOptions: {\n    //         heatmap: {\n    //             colorScale: {\n    //                 ranges: [{\n    //                     from: 0,\n    //                     to: 0,\n    //                     color: \"#F9FAFB\"\n    //                 }, {\n    //                     from: 1,\n    //                     to: 1,\n    //                     color: props.color\n    //                 }]\n    //             }\n    //         }\n    //     }\n    // }\n"]},"metadata":{},"sourceType":"module"}