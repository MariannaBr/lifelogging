{"ast":null,"code":"import simplifyDate from \"../helpers/simplifyDate\";\nimport { todayChart } from \"../helpers/todayDate\";\nimport { useSelector } from \"react-redux\";\n\nvar selectDays = function selectDays(state) {\n  return state.categories.days;\n};\n\nvar storeDays = useSelector(selectDays); // Array of objects [{id:\"\", cells:[]}, {id:\"\", cells:[]}]\n\nvar storeDaysValues = Object.values(storeDays); // get array of days' ids [\"2021-1-1\", \"2021-1-2\"], inputs: data - array of objects [{}, {}]\n\nvar storeDaysIds = storeDaysValues.map(function (day) {\n  return day.id;\n});\n\nfunction generateDefaultDays(firstDay, today) {\n  for (var defaultDays = [], dt = new Date(firstDay); dt <= today; dt.setDate(dt.getDate() + 1)) {\n    defaultDays.push(new Date(dt));\n  }\n\n  var days = defaultDays.map(function (day) {\n    return day.getFullYear().toString() + \"-\" + ((day.getMonth() + 1 < 10 ? \"0\" : \"\") + (day.getMonth() + 1).toString()) + \"-\" + ((day.getDate() < 10 ? \"0\" : \"\") + day.getDate().toString());\n  });\n  return days;\n} // get array of dates from second day to today [\"2021-1-1\", \"2021-1-2\"]\n\n\nvar chartDays = generateDefaultDays(new Date(storeDaysIds[0]), new Date(todayChart)); // list of columns to chart filled with 0, every cell chart gets it\n\nvar defaultDatas = chartDays.map(function (day) {\n  return {\n    x: simplifyDate(day),\n    y: 0\n  };\n});","map":{"version":3,"sources":["/home/mana/c/lifelogging/helpers/defaultDays.js"],"names":["simplifyDate","todayChart","useSelector","selectDays","state","categories","days","storeDays","storeDaysValues","Object","values","storeDaysIds","map","day","id","generateDefaultDays","firstDay","today","defaultDays","dt","Date","setDate","getDate","push","getFullYear","toString","getMonth","chartDays","defaultDatas","x","y"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,yBAAzB;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,KAAK;AAAA,SAAIA,KAAK,CAACC,UAAN,CAAiBC,IAArB;AAAA,CAAxB;;AACA,IAAMC,SAAS,GAAGL,WAAW,CAACC,UAAD,CAA7B,C,CAEA;;AACA,IAAMK,eAAe,GAAGC,MAAM,CAACC,MAAP,CAAcH,SAAd,CAAxB,C,CAEA;;AACA,IAAMI,YAAY,GAAGH,eAAe,CAACI,GAAhB,CAAoB,UAACC,GAAD;AAAA,SAASA,GAAG,CAACC,EAAb;AAAA,CAApB,CAArB;;AAEA,SAASC,mBAAT,CAA6BC,QAA7B,EAAuCC,KAAvC,EAA8C;AAC1C,OAAK,IAAIC,WAAW,GAAC,EAAhB,EAAoBC,EAAE,GAAC,IAAIC,IAAJ,CAASJ,QAAT,CAA5B,EAAgDG,EAAE,IAAEF,KAApD,EAA2DE,EAAE,CAACE,OAAH,CAAWF,EAAE,CAACG,OAAH,KAAa,CAAxB,CAA3D,EAAuF;AACnFJ,IAAAA,WAAW,CAACK,IAAZ,CAAiB,IAAIH,IAAJ,CAASD,EAAT,CAAjB;AACH;;AACD,MAAMb,IAAI,GAAGY,WAAW,CAACN,GAAZ,CAAgB,UAACC,GAAD;AAAA,WAAUA,GAAG,CAACW,WAAJ,EAAD,CAAoBC,QAApB,KAAiC,GAAjC,IAAwC,CAAEZ,GAAG,CAACa,QAAJ,KAAe,CAAhB,GAAqB,EAArB,GAA0B,GAA1B,GAAgC,EAAjC,IAAuC,CAACb,GAAG,CAACa,QAAJ,KAAe,CAAhB,EAAmBD,QAAnB,EAA/E,IAAgH,GAAhH,IAAwH,CAACZ,GAAG,CAACS,OAAJ,KAAgB,EAAhB,GAAqB,GAArB,GAA2B,EAA5B,IAAmCT,GAAG,CAACS,OAAJ,EAAD,CAAgBG,QAAhB,EAA1J,CAAT;AAAA,GAAhB,CAAb;AACA,SAAOnB,IAAP;AACH,C,CAED;;;AACA,IAAMqB,SAAS,GAAGZ,mBAAmB,CAAC,IAAIK,IAAJ,CAAST,YAAY,CAAC,CAAD,CAArB,CAAD,EAA4B,IAAIS,IAAJ,CAASnB,UAAT,CAA5B,CAArC,C,CAEA;;AACA,IAAM2B,YAAY,GAAGD,SAAS,CAACf,GAAV,CAAc,UAACC,GAAD,EAAS;AACxC,SAAO;AACHgB,IAAAA,CAAC,EAAE7B,YAAY,CAACa,GAAD,CADZ;AAEHiB,IAAAA,CAAC,EAAE;AAFA,GAAP;AAIH,CALoB,CAArB","sourcesContent":["import simplifyDate from \"../helpers/simplifyDate\"\nimport { todayChart } from \"../helpers/todayDate\"\nimport { useSelector } from \"react-redux\"\n\nconst selectDays = state => state.categories.days\nconst storeDays = useSelector(selectDays)\n\n// Array of objects [{id:\"\", cells:[]}, {id:\"\", cells:[]}]\nconst storeDaysValues = Object.values(storeDays)\n\n// get array of days' ids [\"2021-1-1\", \"2021-1-2\"], inputs: data - array of objects [{}, {}]\nconst storeDaysIds = storeDaysValues.map((day) => day.id)\n\nfunction generateDefaultDays(firstDay, today) {\n    for (var defaultDays=[], dt=new Date(firstDay); dt<=today; dt.setDate(dt.getDate()+1)) {\n        defaultDays.push(new Date(dt))\n    }\n    const days = defaultDays.map((day) => (day.getFullYear()).toString() + \"-\" + (((day.getMonth()+1) < 10 ? \"0\" : \"\") + (day.getMonth()+1).toString()) + \"-\" + (((day.getDate() < 10 ? \"0\" : \"\") + (day.getDate()).toString())))\n    return days\n}\n\n// get array of dates from second day to today [\"2021-1-1\", \"2021-1-2\"]\nconst chartDays = generateDefaultDays(new Date(storeDaysIds[0]), new Date(todayChart))\n\n// list of columns to chart filled with 0, every cell chart gets it\nconst defaultDatas = chartDays.map((day) => {\n    return {\n        x: simplifyDate(day),\n        y: 0\n    }\n})"]},"metadata":{},"sourceType":"module"}