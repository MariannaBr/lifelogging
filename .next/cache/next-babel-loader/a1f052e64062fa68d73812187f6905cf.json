{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ADD_DAY, ADD_CATEGORY, ADD_CELL, REMOVE_CELL } from \"../actionTypes\";\n/* STRUCTURE OF THE STATE\n\nstate = {\n    days: {\n        [day_id]: {\n            categories: {\n                [category_name]: {\n                    cells: []\n                }\n            }\n        }\n    }\n} \nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case ADD_CELL: {\n            return {\n                ...state,\n                days: {\n                    ...state.days,\n                    [action.payload.day_id]: {\n                        ...state.days[action.payload.day_id],\n                        categories: {\n                            ...state.days[action.payload.day_id].categories,\n                            [action.payload.category_name]: {\n                                ...state.days[action.payload.day_id].categories[action.payload.category_name],\n                                cells: [\n                                    ...state.days[action.payload.day_id].categories[action.payload.category_name].cells,\n                                    action.payload.cell_name\n                                ]\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        default:\n            return state\n    }\n}*/\n\n/* STRUCTURE OF THE STATE - 2\n\nstate = {\n    days: {\n        byId: {\n            \"1.Jan.2021\": {\n                id: \"1.Jan.2021\",\n                categories: [],\n                cells: []\n            }\n        },\n        allIds: {\n            [\"1.Jan.2021\", 2.Jan.2021]\n        }\n    },\n    categories: {\n        byId: {\n            \"food\": {\n                id: \"food\",\n                cells: []\n            },\n            \"mood\": {\n                id: \"mood\",\n                cells: []\n            }\n        },\n        allIds: {\n            [\"food\", \"mood\"]\n        }\n    },\n    cells: {\n        byId: {\n            \"bread\": {\n                id: \"bread\",\n                category: \"food\"\n            },\n            \"happy\": {\n                id: \"happy\",\n                category: \"mood\"\n            }\n        },\n        allIds: {\n            [\"bread\", \"happy\"]\n        }\n    }\n} */\n\n/* STRUCTURE OF THE STATE - 3\nstate = {\n    days: {\n        [day_id]: {\n            categories: {\n                [category_name]: {\n                    cells: []\n                }\n            }\n        }\n    },\n    cells: {\n        [cell_name]: {\n            category: \"\",\n            days: []\n        }\n    }\n} */\n\nconst initialState = {\n  days: {\n    \"0\": {\n      categories: {\n        \"test\": {\n          cells: [\"test\"]\n        }\n      }\n    }\n  },\n  cells: {\n    \"test\": {\n      category: \"test\",\n      days: [\"0\"]\n    }\n  }\n};\n\nfunction addDay(state, action) {\n  const {\n    payload\n  } = action;\n  const {\n    dayId,\n    categoryName,\n    cellName\n  } = payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    [dayId]: {\n      categories: {\n        [categoryName]: {\n          cells: [cellName]\n        }\n      }\n    }\n  });\n}\n\nfunction addCategory(state, action) {\n  const {\n    payload\n  } = action;\n  const {\n    dayId,\n    categoryName,\n    cellName\n  } = payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    days: _objectSpread(_objectSpread({}, state.days), {}, {\n      [dayId]: _objectSpread(_objectSpread({}, state.days[dayId]), {}, {\n        categories: _objectSpread(_objectSpread({}, state.days[dayId].categories), {}, {\n          [categoryName]: {\n            cells: [cellName]\n          }\n        })\n      })\n    })\n  });\n}\n\nfunction addCell(state, action) {\n  const {\n    payload\n  } = action;\n  const {\n    dayId,\n    categoryName,\n    cellName\n  } = payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    days: _objectSpread(_objectSpread({}, state.days), {}, {\n      [dayId]: _objectSpread(_objectSpread({}, state.days[dayId]), {}, {\n        categories: _objectSpread(_objectSpread({}, state.days[dayId].categories), {}, {\n          [categoryName]: _objectSpread(_objectSpread({}, state.days[dayId].categories[categoryName]), {}, {\n            cells: [...state.days[dayId].categories[categoryName].cells, cellName]\n          })\n        })\n      })\n    })\n  });\n} // export default function(state = initialState, action) {\n//     switch(action.type) {\n//         case ADD_CELL: {\n//             const { payload } = action\n//             const { dayId, categoryName, cellName } = payload\n//             if (state.days && state.days[dayId] && state.days[dayId].categories[categoryName]) {\n//                 return addCell(state, action)\n//             } else if (state.days[dayId]) {\n//                 return addCategory(state, action)\n//             } else {\n//                 return addDay(state, action)\n//             }\n//         }\n//         default:\n//             return state\n//     }\n// }\n\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case ADD_CELL:\n      {\n        var _state$days$action$pa, _state$days$action$pa2, _state$days$action$pa3, _state$days$action$pa4;\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          days: _objectSpread(_objectSpread({}, state.days), {}, {\n            [action.payload.day_id]: _objectSpread(_objectSpread({}, state.days[action.payload.day_id] || {}), {}, {\n              categories: _objectSpread(_objectSpread({}, ((_state$days$action$pa = state.days[action.payload.day_id]) === null || _state$days$action$pa === void 0 ? void 0 : _state$days$action$pa.categories) || {}), {}, {\n                [action.payload.category_name]: _objectSpread(_objectSpread({}, ((_state$days$action$pa2 = state.days[action.payload.day_id]) === null || _state$days$action$pa2 === void 0 ? void 0 : _state$days$action$pa2.categories[action.payload.category_name]) || {}), {}, {\n                  cells: [...((_state$days$action$pa3 = state.days[action.payload.day_id]) === null || _state$days$action$pa3 === void 0 ? void 0 : (_state$days$action$pa4 = _state$days$action$pa3.categories[action.payload.category_name]) === null || _state$days$action$pa4 === void 0 ? void 0 : _state$days$action$pa4.cells), action.payload.cell_name]\n                })\n              })\n            })\n          })\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/mana/c/lifelogging/redux/reducers/cellReducer.js"],"names":["ADD_DAY","ADD_CATEGORY","ADD_CELL","REMOVE_CELL","initialState","days","categories","cells","category","addDay","state","action","payload","dayId","categoryName","cellName","addCategory","addCell","type","day_id","category_name","cell_name"],"mappings":"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","sourcesContent":["import { ADD_DAY, ADD_CATEGORY, ADD_CELL, REMOVE_CELL } from \"../actionTypes\"\n\n/* STRUCTURE OF THE STATE\n\nstate = {\n    days: {\n        [day_id]: {\n            categories: {\n                [category_name]: {\n                    cells: []\n                }\n            }\n        }\n    }\n} \nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case ADD_CELL: {\n            return {\n                ...state,\n                days: {\n                    ...state.days,\n                    [action.payload.day_id]: {\n                        ...state.days[action.payload.day_id],\n                        categories: {\n                            ...state.days[action.payload.day_id].categories,\n                            [action.payload.category_name]: {\n                                ...state.days[action.payload.day_id].categories[action.payload.category_name],\n                                cells: [\n                                    ...state.days[action.payload.day_id].categories[action.payload.category_name].cells,\n                                    action.payload.cell_name\n                                ]\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        default:\n            return state\n    }\n}*/\n\n/* STRUCTURE OF THE STATE - 2\n\nstate = {\n    days: {\n        byId: {\n            \"1.Jan.2021\": {\n                id: \"1.Jan.2021\",\n                categories: [],\n                cells: []\n            }\n        },\n        allIds: {\n            [\"1.Jan.2021\", 2.Jan.2021]\n        }\n    },\n    categories: {\n        byId: {\n            \"food\": {\n                id: \"food\",\n                cells: []\n            },\n            \"mood\": {\n                id: \"mood\",\n                cells: []\n            }\n        },\n        allIds: {\n            [\"food\", \"mood\"]\n        }\n    },\n    cells: {\n        byId: {\n            \"bread\": {\n                id: \"bread\",\n                category: \"food\"\n            },\n            \"happy\": {\n                id: \"happy\",\n                category: \"mood\"\n            }\n        },\n        allIds: {\n            [\"bread\", \"happy\"]\n        }\n    }\n} */\n\n/* STRUCTURE OF THE STATE - 3\nstate = {\n    days: {\n        [day_id]: {\n            categories: {\n                [category_name]: {\n                    cells: []\n                }\n            }\n        }\n    },\n    cells: {\n        [cell_name]: {\n            category: \"\",\n            days: []\n        }\n    }\n} */\n\nconst initialState = {\n    days: {\n        \"0\": {\n            categories: {\n                \"test\": {\n                    cells: [\"test\"]\n                }\n            }\n        }\n    },\n    cells: {\n        \"test\": {\n            category: \"test\",\n            days: [\"0\"]\n        }\n    }\n}\n\nfunction addDay(state, action) {\n    const { payload } = action\n    const { dayId, categoryName, cellName } = payload\n    return {\n        ...state,\n        [dayId]: {\n            categories: {\n                [categoryName]: {\n                    cells: [cellName]\n                }\n            }\n        }\n    }\n}\n\nfunction addCategory(state, action) {\n    const { payload } = action\n    const { dayId, categoryName, cellName } = payload\n    return {\n        ...state,\n        days: {\n            ...state.days,\n            [dayId]: {\n                ...state.days[dayId],\n                categories: {\n                    ...state.days[dayId].categories,\n                    [categoryName]: {\n                        cells: [cellName]\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction addCell(state, action) {\n    const { payload } = action\n    const { dayId, categoryName, cellName } = payload\n    return {\n        ...state,\n        days: {\n            ...state.days,\n            [dayId]: {\n                ...state.days[dayId],\n                categories: {\n                    ...state.days[dayId].categories,\n                    [categoryName]: {\n                        ...state.days[dayId].categories[categoryName],\n                        cells: [\n                            ...state.days[dayId].categories[categoryName].cells,\n                            cellName\n                        ]\n                    }\n                }\n            }\n        }\n    }\n}\n\n// export default function(state = initialState, action) {\n//     switch(action.type) {\n//         case ADD_CELL: {\n//             const { payload } = action\n//             const { dayId, categoryName, cellName } = payload\n\n//             if (state.days && state.days[dayId] && state.days[dayId].categories[categoryName]) {\n//                 return addCell(state, action)\n//             } else if (state.days[dayId]) {\n//                 return addCategory(state, action)\n//             } else {\n//                 return addDay(state, action)\n//             }\n//         }\n\n//         default:\n//             return state\n//     }\n// }\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case ADD_CELL: {\n            return {\n                ...state,\n                days: {\n                    ...state.days,\n                    [action.payload.day_id]: {\n                        ...state.days[action.payload.day_id] || {},\n                        categories: {\n                            ...state.days[action.payload.day_id]?.categories || {},\n                            [action.payload.category_name]: {\n                                ...state.days[action.payload.day_id]?.categories[action.payload.category_name] || {},\n                                cells: [\n                                    ...state.days[action.payload.day_id]?.categories[action.payload.category_name]?.cells,\n                                    action.payload.cell_name\n                                ]\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}