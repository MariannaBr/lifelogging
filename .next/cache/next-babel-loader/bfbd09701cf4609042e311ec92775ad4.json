{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_CELL, REMOVE_CELL } from \"../actionTypes\";\nimport deleteItem from \"../../helpers/deleteItem\"; // const initialState = {\n//     days: {\n//         \"0\": {\n//             categories: {\n//                 \"test\": {\n//                     cells: [\"test\"]\n//                 }\n//             }\n//         }\n//     },\n//     cells: {\n//         \"test\": {\n//             category: \"test\",\n//             days: [\"0\"]\n//         }\n//     }\n// }\n// export default function cellReducer(state = initialState, action) {\n//     switch(action.type) {\n//         case ADD_CELL: {\n//             const { payload } = action\n//             const { dayId, categoryName, cellName } = payload\n//             return {\n//                 ...state,\n//                 days: {\n//                     ...state?.days,\n//                     [dayId]: {\n//                         ...state?.days[dayId],\n//                         categories: {\n//                             ...state?.days[dayId]?.categories,\n//                             [categoryName]: {\n//                                 ...state?.days[dayId]?.categories[categoryName],\n//                                 cells: [\n//                                     ...state?.days[dayId]?.categories[categoryName]?.cells || [],\n//                                     cellName\n//                                 ]\n//                             }\n//                         }\n//                     }\n//                 },\n//                 cells: {\n//                     ...state?.cells,\n//                     [cellName]: {\n//                         ...state?.cells[cellName],\n//                         category: categoryName,\n//                         days: [\n//                             ...state?.cells[cellName]?.days || [],\n//                             dayId\n//                         ]\n//                     }\n//                 }\n//             }\n//         }\n//         case REMOVE_CELL: {\n//             const { payload } = action\n//             const { dayId, categoryName, cellName } = payload\n//             return {\n//                 ...state,\n//                 days: {\n//                     ...state?.days,\n//                     [dayId]: {\n//                         ...state?.days[dayId],\n//                         categories: {\n//                             ...state?.days[dayId]?.categories,\n//                             [categoryName]: {\n//                                 ...state?.days[dayId]?.categories[categoryName],\n//                                 cells: deleteItem(state?.days[dayId]?.categories[categoryName]?.cells, cellName)\n//                             }\n//                         }\n//                     }\n//                 },\n//                 cells: {\n//                     ...state?.cells,\n//                     [cellName]: {\n//                         ...state?.cells[cellName],\n//                         days: deleteItem(state?.cells[cellName]?.days, dayId)\n//                     }\n//                 }\n//             }\n//         }\n//         default:\n//             return state\n//     }\n// }\n\nvar initialState = {\n  days: [{\n    id: \"0\",\n    categories: [{\n      id: \"test\",\n      cells: [\"test\"]\n    }]\n  }],\n  cells: [{\n    id: \"test\",\n    category: \"test\",\n    days: [\"0\"]\n  }]\n};\nexport default function cellReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_CELL:\n      {\n        var _state$days, _state$days2, _state$days2$categori;\n\n        var payload = action.payload;\n        var dayId = payload.dayId,\n            categoryName = payload.categoryName,\n            cellName = payload.cellName;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          days: [].concat(_toConsumableArray(state === null || state === void 0 ? void 0 : state.days), [{\n            id: dayId,\n            categories: [].concat(_toConsumableArray(state === null || state === void 0 ? void 0 : (_state$days = state.days) === null || _state$days === void 0 ? void 0 : _state$days.categories), [{\n              id: categoryName,\n              cells: [].concat(_toConsumableArray(state === null || state === void 0 ? void 0 : (_state$days2 = state.days) === null || _state$days2 === void 0 ? void 0 : (_state$days2$categori = _state$days2.categories) === null || _state$days2$categori === void 0 ? void 0 : _state$days2$categori.cells), [cellName])\n            }])\n          }])\n        });\n      }\n\n    case REMOVE_CELL:\n      {\n        var _state$days$_dayId, _state$days$_dayId2, _state$days$_dayId3, _state$days$_dayId3$c, _state$cells$_cellNam;\n\n        var _payload = action.payload;\n        var _dayId = _payload.dayId,\n            _categoryName = _payload.categoryName,\n            _cellName = _payload.cellName;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          days: _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : state.days), {}, _defineProperty({}, _dayId, _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : state.days[_dayId]), {}, {\n            categories: _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : (_state$days$_dayId = state.days[_dayId]) === null || _state$days$_dayId === void 0 ? void 0 : _state$days$_dayId.categories), {}, _defineProperty({}, _categoryName, _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : (_state$days$_dayId2 = state.days[_dayId]) === null || _state$days$_dayId2 === void 0 ? void 0 : _state$days$_dayId2.categories[_categoryName]), {}, {\n              cells: deleteItem(state === null || state === void 0 ? void 0 : (_state$days$_dayId3 = state.days[_dayId]) === null || _state$days$_dayId3 === void 0 ? void 0 : (_state$days$_dayId3$c = _state$days$_dayId3.categories[_categoryName]) === null || _state$days$_dayId3$c === void 0 ? void 0 : _state$days$_dayId3$c.cells, _cellName)\n            })))\n          }))),\n          cells: _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : state.cells), {}, _defineProperty({}, _cellName, _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : state.cells[_cellName]), {}, {\n            days: deleteItem(state === null || state === void 0 ? void 0 : (_state$cells$_cellNam = state.cells[_cellName]) === null || _state$cells$_cellNam === void 0 ? void 0 : _state$cells$_cellNam.days, _dayId)\n          })))\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/mana/c/lifelogging/redux/reducers/cellReducer.js"],"names":["ADD_CELL","REMOVE_CELL","deleteItem","initialState","days","id","categories","cells","category","cellReducer","state","action","type","payload","dayId","categoryName","cellName"],"mappings":";;;;;;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,gBAAtC;AACA,OAAOC,UAAP,MAAuB,0BAAvB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,CACF;AACIC,IAAAA,EAAE,EAAE,GADR;AAEIC,IAAAA,UAAU,EAAE,CACR;AACID,MAAAA,EAAE,EAAE,MADR;AAEIE,MAAAA,KAAK,EAAE,CAAC,MAAD;AAFX,KADQ;AAFhB,GADE,CADW;AAYjBA,EAAAA,KAAK,EAAE,CACH;AACIF,IAAAA,EAAE,EAAE,MADR;AAEIG,IAAAA,QAAQ,EAAE,MAFd;AAGIJ,IAAAA,IAAI,EAAE,CAAC,GAAD;AAHV,GADG;AAZU,CAArB;AAqBA,eAAe,SAASK,WAAT,GAAmD;AAAA,MAA9BC,KAA8B,uEAAtBP,YAAsB;AAAA,MAARQ,MAAQ;;AAC9D,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKZ,QAAL;AAAe;AAAA;;AAAA,YACHa,OADG,GACSF,MADT,CACHE,OADG;AAAA,YAEHC,KAFG,GAE+BD,OAF/B,CAEHC,KAFG;AAAA,YAEIC,YAFJ,GAE+BF,OAF/B,CAEIE,YAFJ;AAAA,YAEkBC,QAFlB,GAE+BH,OAF/B,CAEkBG,QAFlB;AAGX,+CACON,KADP;AAEIN,UAAAA,IAAI,+BACGM,KADH,aACGA,KADH,uBACGA,KAAK,CAAEN,IADV,IAEA;AACIC,YAAAA,EAAE,EAAES,KADR;AAEIR,YAAAA,UAAU,+BACHI,KADG,aACHA,KADG,sCACHA,KAAK,CAAEN,IADJ,gDACH,YAAaE,UADV,IAEN;AACID,cAAAA,EAAE,EAAEU,YADR;AAEIR,cAAAA,KAAK,+BACEG,KADF,aACEA,KADF,uCACEA,KAAK,CAAEN,IADT,0EACE,aAAaE,UADf,0DACE,sBAAyBC,KAD3B,IAEDS,QAFC;AAFT,aAFM;AAFd,WAFA;AAFR;AAmBH;;AACD,SAAKf,WAAL;AAAkB;AAAA;;AAAA,YACNY,QADM,GACMF,MADN,CACNE,OADM;AAAA,YAENC,MAFM,GAE4BD,QAF5B,CAENC,KAFM;AAAA,YAECC,aAFD,GAE4BF,QAF5B,CAECE,YAFD;AAAA,YAEeC,SAFf,GAE4BH,QAF5B,CAEeG,QAFf;AAGd,+CACON,KADP;AAEIN,UAAAA,IAAI,kCACGM,KADH,aACGA,KADH,uBACGA,KAAK,CAAEN,IADV,2BAECU,MAFD,kCAGOJ,KAHP,aAGOA,KAHP,uBAGOA,KAAK,CAAEN,IAAP,CAAYU,MAAZ,CAHP;AAIIR,YAAAA,UAAU,kCACHI,KADG,aACHA,KADG,6CACHA,KAAK,CAAEN,IAAP,CAAYU,MAAZ,CADG,uDACH,mBAAoBR,UADjB,2BAELS,aAFK,kCAGCL,KAHD,aAGCA,KAHD,8CAGCA,KAAK,CAAEN,IAAP,CAAYU,MAAZ,CAHD,wDAGC,oBAAoBR,UAApB,CAA+BS,aAA/B,CAHD;AAIFR,cAAAA,KAAK,EAAEL,UAAU,CAACQ,KAAD,aAACA,KAAD,8CAACA,KAAK,CAAEN,IAAP,CAAYU,MAAZ,CAAD,iFAAC,oBAAoBR,UAApB,CAA+BS,aAA/B,CAAD,0DAAC,sBAA8CR,KAA/C,EAAsDS,SAAtD;AAJf;AAJd,cAFR;AAeIT,UAAAA,KAAK,kCACEG,KADF,aACEA,KADF,uBACEA,KAAK,CAAEH,KADT,2BAEAS,SAFA,kCAGMN,KAHN,aAGMA,KAHN,uBAGMA,KAAK,CAAEH,KAAP,CAAaS,SAAb,CAHN;AAIGZ,YAAAA,IAAI,EAAEF,UAAU,CAACQ,KAAD,aAACA,KAAD,gDAACA,KAAK,CAAEH,KAAP,CAAaS,SAAb,CAAD,0DAAC,sBAAwBZ,IAAzB,EAA+BU,MAA/B;AAJnB;AAfT;AAuBH;;AAED;AACI,aAAOJ,KAAP;AArDR;AAuDH","sourcesContent":["import { ADD_CELL, REMOVE_CELL } from \"../actionTypes\"\nimport deleteItem from \"../../helpers/deleteItem\"\n\n// const initialState = {\n//     days: {\n//         \"0\": {\n//             categories: {\n//                 \"test\": {\n//                     cells: [\"test\"]\n//                 }\n//             }\n//         }\n//     },\n//     cells: {\n//         \"test\": {\n//             category: \"test\",\n//             days: [\"0\"]\n//         }\n//     }\n// }\n\n// export default function cellReducer(state = initialState, action) {\n//     switch(action.type) {\n//         case ADD_CELL: {\n//             const { payload } = action\n//             const { dayId, categoryName, cellName } = payload\n//             return {\n//                 ...state,\n//                 days: {\n//                     ...state?.days,\n//                     [dayId]: {\n//                         ...state?.days[dayId],\n//                         categories: {\n//                             ...state?.days[dayId]?.categories,\n//                             [categoryName]: {\n//                                 ...state?.days[dayId]?.categories[categoryName],\n//                                 cells: [\n//                                     ...state?.days[dayId]?.categories[categoryName]?.cells || [],\n//                                     cellName\n//                                 ]\n//                             }\n//                         }\n//                     }\n//                 },\n//                 cells: {\n//                     ...state?.cells,\n//                     [cellName]: {\n//                         ...state?.cells[cellName],\n//                         category: categoryName,\n//                         days: [\n//                             ...state?.cells[cellName]?.days || [],\n//                             dayId\n//                         ]\n//                     }\n//                 }\n//             }\n//         }\n//         case REMOVE_CELL: {\n//             const { payload } = action\n//             const { dayId, categoryName, cellName } = payload\n//             return {\n//                 ...state,\n//                 days: {\n//                     ...state?.days,\n//                     [dayId]: {\n//                         ...state?.days[dayId],\n//                         categories: {\n//                             ...state?.days[dayId]?.categories,\n//                             [categoryName]: {\n//                                 ...state?.days[dayId]?.categories[categoryName],\n//                                 cells: deleteItem(state?.days[dayId]?.categories[categoryName]?.cells, cellName)\n//                             }\n//                         }\n//                     }\n//                 },\n//                 cells: {\n//                     ...state?.cells,\n//                     [cellName]: {\n//                         ...state?.cells[cellName],\n//                         days: deleteItem(state?.cells[cellName]?.days, dayId)\n//                     }\n//                 }\n//             }\n//         }\n\n//         default:\n//             return state\n//     }\n// }\n\nconst initialState = {\n    days: [\n        {\n            id: \"0\",\n            categories: [\n                {\n                    id: \"test\",\n                    cells: [\"test\"]\n                }\n            ]\n        }\n    ],\n    cells: [\n        {\n            id: \"test\",\n            category: \"test\",\n            days: [\"0\"]\n        }\n    ]\n}\n\nexport default function cellReducer(state = initialState, action) {\n    switch(action.type) {\n        case ADD_CELL: {\n            const { payload } = action\n            const { dayId, categoryName, cellName } = payload\n            return {\n                ...state,\n                days: [\n                    ...state?.days,\n                    {\n                        id: dayId,\n                        categories: [\n                            ...state?.days?.categories,\n                            {\n                                id: categoryName,\n                                cells: [\n                                    ...state?.days?.categories?.cells,\n                                    cellName\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n        case REMOVE_CELL: {\n            const { payload } = action\n            const { dayId, categoryName, cellName } = payload\n            return {\n                ...state,\n                days: {\n                    ...state?.days,\n                    [dayId]: {\n                        ...state?.days[dayId],\n                        categories: {\n                            ...state?.days[dayId]?.categories,\n                            [categoryName]: {\n                                ...state?.days[dayId]?.categories[categoryName],\n                                cells: deleteItem(state?.days[dayId]?.categories[categoryName]?.cells, cellName)\n                            }\n                        }\n                    }\n                },\n                cells: {\n                    ...state?.cells,\n                    [cellName]: {\n                        ...state?.cells[cellName],\n                        days: deleteItem(state?.cells[cellName]?.days, dayId)\n                    }\n                }\n            }\n        }\n\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}