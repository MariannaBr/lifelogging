{"ast":null,"code":"import { init } from \"next-firebase-auth\"; //import * as admin from \"firebase-admin\"\n// var firebaseui = require('firebaseui')\n// var ui = new firebaseui.auth.AuthUI(firebase.auth())\n// var uiConfig = {\n//     callbacks: {\n//       signInSuccessWithAuthResult: function(authResult, redirectUrl) {\n//         // User successfully signed in.\n//         // Return type determines whether we continue the redirect automatically\n//         // or whether we leave that to developer to handle.\n//         return true;\n//       },\n//       uiShown: function() {\n//         // The widget is rendered.\n//         // Hide the loader.\n//         document.getElementById('loader').style.display = 'none'\n//       }\n//     },\n//     // Will use popup for IDP Providers sign-in flow instead of the default, redirect.\n//     signInFlow: 'popup',\n//     signInSuccessUrl: '<url-to-redirect-to-on-success>',\n//     signInOptions: [\n//       // Leave the lines as is for the providers you want to offer your users.\n//       firebase.auth.EmailAuthProvider.PROVIDER_ID,\n//       firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n//     ],\n//     // Terms of service url.\n//     tosUrl: '<your-tos-url>',\n//     // Privacy policy url.\n//     privacyPolicyUrl: '<your-privacy-policy-url>'\n//   };\n// ui.start('#firebaseui-auth-container', uiConfig)\n// export default ui\n\nconst initAuth = () => {\n  init({\n    authPageURL: '/auth',\n    appPageURL: '/',\n    loginAPIEndpoint: '/api/login',\n    // required\n    logoutAPIEndpoint: '/api/logout',\n    // required\n    firebaseAdminInitConfig: {\n      credential: {\n        projectId: 'lifelogging-20c8a',\n        clientEmail: 'lifelogging-20c8a@appspot.gserviceaccount.com',\n        // The private key must not be accesssible on the client side.\n        private_key: process.env.FIREBASE_PRIVATE_KEY\n      },\n      databaseURL: \"https://lifelogging-20c8a-default-rtdb.europe-west1.firebasedatabase.app\"\n    },\n    firebaseClientInitConfig: {\n      apiKey: 'AIzaSyD61dFVqFCDh029N8Rr_PQjhJg5xAFOcRk',\n      // required\n      authDomain: 'lifelogging-20c8a.firebaseapp.com',\n      databaseURL: 'https://lifelogging-20c8a.firebaseio.com',\n      projectId: 'lifelogging-20c8a'\n    },\n    cookies: {\n      name: 'lifelogging',\n      // required\n      // Keys are required unless you set `signed` to `false`.\n      // The keys cannot be accessible on the client side.\n      keys: [process.env.COOKIE_SECRET_CURRENT, process.env.COOKIE_SECRET_PREVIOUS],\n      httpOnly: true,\n      maxAge: 12 * 60 * 60 * 24 * 1000,\n      // twelve days\n      overwrite: true,\n      path: '/',\n      sameSite: 'strict',\n      secure: true,\n      // set this to false in local (non-HTTPS) development\n      signed: false\n    }\n  });\n};\n\nexport default initAuth;","map":{"version":3,"sources":["/home/mana/c/lifelogging/utils/initFirebaseUI.js"],"names":["init","initAuth","authPageURL","appPageURL","loginAPIEndpoint","logoutAPIEndpoint","firebaseAdminInitConfig","credential","projectId","clientEmail","private_key","process","env","FIREBASE_PRIVATE_KEY","databaseURL","firebaseClientInitConfig","apiKey","authDomain","cookies","name","keys","COOKIE_SECRET_CURRENT","COOKIE_SECRET_PREVIOUS","httpOnly","maxAge","overwrite","path","sameSite","secure","signed"],"mappings":"AAAA,SAASA,IAAT,QAAqB,oBAArB,C,CACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACnBD,EAAAA,IAAI,CAAC;AACDE,IAAAA,WAAW,EAAE,OADZ;AAEDC,IAAAA,UAAU,EAAE,GAFX;AAGDC,IAAAA,gBAAgB,EAAE,YAHjB;AAG+B;AAChCC,IAAAA,iBAAiB,EAAE,aAJlB;AAIiC;AAClCC,IAAAA,uBAAuB,EAAE;AACrBC,MAAAA,UAAU,EAAE;AACVC,QAAAA,SAAS,EAAE,mBADD;AAEVC,QAAAA,WAAW,EAAE,+CAFH;AAGV;AACAC,QAAAA,WAAW,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAJf,OADS;AAOrBC,MAAAA,WAAW,EAAE;AAPQ,KALxB;AAcDC,IAAAA,wBAAwB,EAAE;AACtBC,MAAAA,MAAM,EAAE,yCADc;AAC6B;AACnDC,MAAAA,UAAU,EAAE,mCAFU;AAGtBH,MAAAA,WAAW,EAAE,0CAHS;AAItBN,MAAAA,SAAS,EAAE;AAJW,KAdzB;AAoBDU,IAAAA,OAAO,EAAE;AACLC,MAAAA,IAAI,EAAE,aADD;AACgB;AACrB;AACA;AACAC,MAAAA,IAAI,EAAE,CACJT,OAAO,CAACC,GAAR,CAAYS,qBADR,EAEJV,OAAO,CAACC,GAAR,CAAYU,sBAFR,CAJD;AAQLC,MAAAA,QAAQ,EAAE,IARL;AASLC,MAAAA,MAAM,EAAE,KAAK,EAAL,GAAU,EAAV,GAAe,EAAf,GAAoB,IATvB;AAS6B;AAClCC,MAAAA,SAAS,EAAE,IAVN;AAWLC,MAAAA,IAAI,EAAE,GAXD;AAYLC,MAAAA,QAAQ,EAAE,QAZL;AAaLC,MAAAA,MAAM,EAAE,IAbH;AAaS;AACdC,MAAAA,MAAM,EAAE;AAdH;AApBR,GAAD,CAAJ;AAqCH,CAtCD;;AAwCA,eAAe5B,QAAf","sourcesContent":["import { init } from \"next-firebase-auth\"\n//import * as admin from \"firebase-admin\"\n\n// var firebaseui = require('firebaseui')\n\n// var ui = new firebaseui.auth.AuthUI(firebase.auth())\n\n// var uiConfig = {\n//     callbacks: {\n//       signInSuccessWithAuthResult: function(authResult, redirectUrl) {\n//         // User successfully signed in.\n//         // Return type determines whether we continue the redirect automatically\n//         // or whether we leave that to developer to handle.\n//         return true;\n//       },\n//       uiShown: function() {\n//         // The widget is rendered.\n//         // Hide the loader.\n//         document.getElementById('loader').style.display = 'none'\n//       }\n//     },\n//     // Will use popup for IDP Providers sign-in flow instead of the default, redirect.\n//     signInFlow: 'popup',\n//     signInSuccessUrl: '<url-to-redirect-to-on-success>',\n//     signInOptions: [\n//       // Leave the lines as is for the providers you want to offer your users.\n//       firebase.auth.EmailAuthProvider.PROVIDER_ID,\n//       firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n//     ],\n//     // Terms of service url.\n//     tosUrl: '<your-tos-url>',\n//     // Privacy policy url.\n//     privacyPolicyUrl: '<your-privacy-policy-url>'\n//   };\n\n// ui.start('#firebaseui-auth-container', uiConfig)\n\n// export default ui\n\nconst initAuth = () => {\n    init({\n        authPageURL: '/auth',\n        appPageURL: '/',\n        loginAPIEndpoint: '/api/login', // required\n        logoutAPIEndpoint: '/api/logout', // required\n        firebaseAdminInitConfig: {\n            credential: {\n              projectId: 'lifelogging-20c8a',\n              clientEmail: 'lifelogging-20c8a@appspot.gserviceaccount.com',\n              // The private key must not be accesssible on the client side.\n              private_key: process.env.FIREBASE_PRIVATE_KEY,\n            },\n            databaseURL: \"https://lifelogging-20c8a-default-rtdb.europe-west1.firebasedatabase.app\",\n        },\n        firebaseClientInitConfig: {\n            apiKey: 'AIzaSyD61dFVqFCDh029N8Rr_PQjhJg5xAFOcRk', // required\n            authDomain: 'lifelogging-20c8a.firebaseapp.com',\n            databaseURL: 'https://lifelogging-20c8a.firebaseio.com',\n            projectId: 'lifelogging-20c8a',\n        },\n        cookies: {\n            name: 'lifelogging', // required\n            // Keys are required unless you set `signed` to `false`.\n            // The keys cannot be accessible on the client side.\n            keys: [\n              process.env.COOKIE_SECRET_CURRENT,\n              process.env.COOKIE_SECRET_PREVIOUS,\n            ],\n            httpOnly: true,\n            maxAge: 12 * 60 * 60 * 24 * 1000, // twelve days\n            overwrite: true,\n            path: '/',\n            sameSite: 'strict',\n            secure: true, // set this to false in local (non-HTTPS) development\n            signed: false,\n          },\n    })\n}\n\nexport default initAuth\n\n"]},"metadata":{},"sourceType":"module"}