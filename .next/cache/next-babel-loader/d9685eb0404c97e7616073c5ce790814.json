{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/mana/c/lifelogging/components/CategoryChart.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { useSelector } from \"react-redux\";\nimport Chart from \"react-apexcharts\";\nimport { todayChart } from \"../helpers/todayDate\";\nimport generateDefaultDays from \"../helpers/defaultDays\";\nimport { render, useRef } from \"react-dom\";\nimport { Component } from \"react\";\n\nvar selectDays = function selectDays(state) {\n  return state.categories.days;\n}; //function CategoryChart(props) {\n\n\nvar CategoryChart = /*#__PURE__*/function (_Component) {\n  _inherits(CategoryChart, _Component);\n\n  var _super = _createSuper(CategoryChart);\n\n  function CategoryChart(props) {\n    var _this;\n\n    _classCallCheck(this, CategoryChart);\n\n    _this = _super.call(this, props);\n    var ref = useRef(true);\n    var days = useSelector(selectDays); // Array of objects [{}, {}]\n\n    var daysValues = Object.values(days); // get array of days' ids [\"\", \"\"], inputs: data - array of objects [{}, {}]\n\n    var daysIds = daysValues.map(function (day) {\n      return day.id;\n    });\n    var defaultDays = generateDefaultDays(new Date(daysIds[1]), new Date(todayChart));\n\n    function cellHappenedToday(cell, defaultDay) {\n      if (daysIds.includes(defaultDay)) {\n        return daysValues.reduce(function (total, day) {\n          // o=daysValues.reduce((total, day) => {...}, 0)\n          if (day.id === defaultDay) {\n            var categoryIds = Object.values(day.categories).map(function (cat) {\n              return cat.id;\n            });\n\n            if (categoryIds.includes(props.id)) {\n              var cells = Object.values(day.categories[props.id].cells);\n              console.log(\"cells\", cells, \"cell\", cell);\n\n              if (cells.includes(cell)) {\n                console.log(cells.includes(cell));\n                return total + 1;\n              } else {\n                return 0;\n              }\n            } else {\n              return 0;\n            }\n          } else {\n            return 0;\n          }\n        }, 0);\n      } else {\n        return 0;\n      }\n    }\n\n    var options = {\n      series: props.defaultCells.map(function (cell) {\n        return {\n          name: cell.name,\n          data: defaultDays.map(function (day) {\n            return {\n              x: day,\n              y: cellHappenedToday(cell, day)\n            };\n          })\n        };\n      }),\n      plotOptions: {\n        heatmap: {\n          colorScale: {\n            ranges: [{\n              from: 0,\n              to: 0,\n              color: \"#F9FAFB\"\n            }, {\n              from: 1,\n              to: 1,\n              color: props.color\n            }]\n          }\n        }\n      }\n    };\n    return _this;\n  } // var chart = new ApexCharts(ref, options)\n  // chart.render()\n\n\n  _createClass(CategoryChart, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Chart, {\n          options: props.options.plotOptions,\n          series: props.options.series,\n          type: \"heatmap\",\n          width: \"500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return CategoryChart;\n}(Component);\n\nexport default CategoryChart; // \n//console.log(categories)\n// Array of arrays of ids [[\"\", \"\", \"\"], [\"\", \"\", \"\"]]\n//const categoriesIds = categories.map((category) => category.map((cat) => cat.id))\n//console.log(categoriesIds)\n// Array of arrays of arrays of cells [[[\"\",\"\"],[\"\",\"\"]],[[\"\",\"\"],[\"\",\"\"]]]\n//const cells = categories.map((category) => category.map((cat) => cat.cells))\n//console.log(cells)\n// function getDefaultCell(defaultCells) {\n//     defaultCells.forEach((cell) => cell.name)\n// }\n// function cellHappenedToday(cell, cells, category, days, defaultday) {\n//     if (days.includes(defaultday) && category.includes(props.id) && cells.includes(cell)) {\n//         return 1\n//     } else {\n//         return 0\n//     }  \n// }\n// get array of categories of particular day [\"\", \"\"], inputs: day - string, data - array of objects [{}, {}]\n// function getCategoriesofDay(day, data) {\n//     let categories = []\n//     data.forEach((item) => {\n//         if (item.id === day) {\n//             categories = Object.values(item.categories).map((cat) => cat.id)\n//         }\n//     })\n//     return categories\n// }\n// get array of cells of particular category [\"\", \"\"], inputs: category - string, data(category) - array of objects [{}, {}]\n// function getCellsofCategory(category, data) {\n//     let cells = []\n//     data.forEach((item) => {\n//         if (item.id === category) {\n//             cells = Object.values(item.cells)\n//         }\n//     })\n//     return cells\n// }\n//Array of arrays of objects - categories [[{}, {}], [{}, {}]]\n//const categoriesValues = daysValues.map((day) => Object.values(day.categories))","map":{"version":3,"sources":["/home/mana/c/lifelogging/components/CategoryChart.js"],"names":["useSelector","Chart","todayChart","generateDefaultDays","render","useRef","Component","selectDays","state","categories","days","CategoryChart","props","ref","daysValues","Object","values","daysIds","map","day","id","defaultDays","Date","cellHappenedToday","cell","defaultDay","includes","reduce","total","categoryIds","cat","cells","console","log","options","series","defaultCells","name","data","x","y","plotOptions","heatmap","colorScale","ranges","from","to","color"],"mappings":"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","sourcesContent":["import { useSelector } from \"react-redux\"\nimport Chart from \"react-apexcharts\"\nimport { todayChart } from \"../helpers/todayDate\"\nimport generateDefaultDays from \"../helpers/defaultDays\"\nimport { render, useRef } from \"react-dom\"\nimport { Component } from \"react\"\n\nconst selectDays = state => state.categories.days\n\n//function CategoryChart(props) {\n\nclass CategoryChart extends Component {\n    constructor(props) {\n        super(props)\n        const ref = useRef(true)\n        const days = useSelector(selectDays)\n        // Array of objects [{}, {}]\n        const daysValues = Object.values(days)\n\n        // get array of days' ids [\"\", \"\"], inputs: data - array of objects [{}, {}]\n        const daysIds = daysValues.map((day) => day.id)\n\n        const defaultDays = generateDefaultDays(new Date(daysIds[1]), new Date(todayChart))\n\n        function cellHappenedToday(cell, defaultDay) {\n            if (daysIds.includes(defaultDay)) {\n                return daysValues.reduce((total, day) => {  // o=daysValues.reduce((total, day) => {...}, 0)\n                    if (day.id === defaultDay) {\n                        const categoryIds = Object.values(day.categories).map((cat) => cat.id)\n                        if (categoryIds.includes(props.id)) {\n                            const cells = Object.values(day.categories[props.id].cells)\n                            console.log(\"cells\", cells, \"cell\", cell)\n                            if (cells.includes(cell)) {\n                                console.log(cells.includes(cell))\n                                return total + 1\n                            } else {\n                                return 0\n                            }\n                        } else {\n                            return 0\n                        }\n                    } else {\n                        return 0\n                    }\n                }, 0)\n\n            } else {\n                return 0\n            }\n        }\n        \n        const options = {\n            series: \n                props.defaultCells.map((cell) => (\n                {\n                    name: cell.name,\n                    data: defaultDays.map((day) => (\n                        {\n                            x: day,\n                            y: cellHappenedToday(cell, day)\n                        }\n                    ))\n                }\n            )),\n            plotOptions: {\n                heatmap: {\n                    colorScale: {\n                        ranges: [{\n                            from: 0,\n                            to: 0,\n                            color: \"#F9FAFB\"\n                        }, {\n                            from: 1,\n                            to: 1,\n                            color: props.color\n                        }]\n                    }\n                }\n            }\n        }\n\n    }\n    \n\n    // var chart = new ApexCharts(ref, options)\n    // chart.render()\n    render() {\n        return (\n            <div>\n                <Chart options={props.options.plotOptions} series={props.options.series} type=\"heatmap\" width=\"500\"/>\n            </div>\n        )\n    }\n}\n\nexport default CategoryChart\n\n// \n    //console.log(categories)\n\n    // Array of arrays of ids [[\"\", \"\", \"\"], [\"\", \"\", \"\"]]\n    //const categoriesIds = categories.map((category) => category.map((cat) => cat.id))\n    //console.log(categoriesIds)\n\n    // Array of arrays of arrays of cells [[[\"\",\"\"],[\"\",\"\"]],[[\"\",\"\"],[\"\",\"\"]]]\n    //const cells = categories.map((category) => category.map((cat) => cat.cells))\n    //console.log(cells)\n\n    // function getDefaultCell(defaultCells) {\n    //     defaultCells.forEach((cell) => cell.name)\n    // }\n\n    // function cellHappenedToday(cell, cells, category, days, defaultday) {\n    //     if (days.includes(defaultday) && category.includes(props.id) && cells.includes(cell)) {\n    //         return 1\n    //     } else {\n    //         return 0\n    //     }  \n    // }\n\n    // get array of categories of particular day [\"\", \"\"], inputs: day - string, data - array of objects [{}, {}]\n    // function getCategoriesofDay(day, data) {\n    //     let categories = []\n    //     data.forEach((item) => {\n    //         if (item.id === day) {\n    //             categories = Object.values(item.categories).map((cat) => cat.id)\n    //         }\n    //     })\n    //     return categories\n    // }\n\n    // get array of cells of particular category [\"\", \"\"], inputs: category - string, data(category) - array of objects [{}, {}]\n    // function getCellsofCategory(category, data) {\n    //     let cells = []\n    //     data.forEach((item) => {\n    //         if (item.id === category) {\n    //             cells = Object.values(item.cells)\n    //         }\n    //     })\n    //     return cells\n    // }\n    //Array of arrays of objects - categories [[{}, {}], [{}, {}]]\n    //const categoriesValues = daysValues.map((day) => Object.values(day.categories))"]},"metadata":{},"sourceType":"module"}