{"ast":null,"code":"import { firebaseui } from \"firebaseui\";\nvar ui = new firebaseui.auth.AuthUI(firebase.auth());\nvar uiConfig = {\n  callbacks: {\n    signInSuccessWithAuthResult: function (authResult, redirectUrl) {\n      // User successfully signed in.\n      // Return type determines whether we continue the redirect automatically\n      // or whether we leave that to developer to handle.\n      return true;\n    },\n    uiShown: function () {\n      // The widget is rendered.\n      // Hide the loader.\n      document.getElementById('loader').style.display = 'none';\n    }\n  },\n  // Will use popup for IDP Providers sign-in flow instead of the default, redirect.\n  signInFlow: 'popup',\n  signInSuccessUrl: '<url-to-redirect-to-on-success>',\n  signInOptions: [// Leave the lines as is for the providers you want to offer your users.\n  firebase.auth.EmailAuthProvider.PROVIDER_ID, firebase.auth.GoogleAuthProvider.PROVIDER_ID],\n  // Terms of service url.\n  tosUrl: '<your-tos-url>',\n  // Privacy policy url.\n  privacyPolicyUrl: '<your-privacy-policy-url>'\n};\nui.start('#firebaseui-auth-container', uiConfig);\nexport default ui;","map":{"version":3,"sources":["/home/mana/c/lifelogging/utils/initFirebaseUI.js"],"names":["firebaseui","ui","auth","AuthUI","firebase","uiConfig","callbacks","signInSuccessWithAuthResult","authResult","redirectUrl","uiShown","document","getElementById","style","display","signInFlow","signInSuccessUrl","signInOptions","EmailAuthProvider","PROVIDER_ID","GoogleAuthProvider","tosUrl","privacyPolicyUrl","start"],"mappings":"AAAA,SAASA,UAAT,QAA2B,YAA3B;AAEA,IAAIC,EAAE,GAAG,IAAID,UAAU,CAACE,IAAX,CAAgBC,MAApB,CAA2BC,QAAQ,CAACF,IAAT,EAA3B,CAAT;AAEA,IAAIG,QAAQ,GAAG;AACXC,EAAAA,SAAS,EAAE;AACTC,IAAAA,2BAA2B,EAAE,UAASC,UAAT,EAAqBC,WAArB,EAAkC;AAC7D;AACA;AACA;AACA,aAAO,IAAP;AACD,KANQ;AAOTC,IAAAA,OAAO,EAAE,YAAW;AAClB;AACA;AACAC,MAAAA,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkCC,KAAlC,CAAwCC,OAAxC,GAAkD,MAAlD;AACD;AAXQ,GADA;AAcX;AACAC,EAAAA,UAAU,EAAE,OAfD;AAgBXC,EAAAA,gBAAgB,EAAE,iCAhBP;AAiBXC,EAAAA,aAAa,EAAE,CACb;AACAb,EAAAA,QAAQ,CAACF,IAAT,CAAcgB,iBAAd,CAAgCC,WAFnB,EAGbf,QAAQ,CAACF,IAAT,CAAckB,kBAAd,CAAiCD,WAHpB,CAjBJ;AAsBX;AACAE,EAAAA,MAAM,EAAE,gBAvBG;AAwBX;AACAC,EAAAA,gBAAgB,EAAE;AAzBP,CAAf;AA4BArB,EAAE,CAACsB,KAAH,CAAS,4BAAT,EAAuClB,QAAvC;AAEA,eAAeJ,EAAf","sourcesContent":["import { firebaseui } from \"firebaseui\"\n\nvar ui = new firebaseui.auth.AuthUI(firebase.auth())\n\nvar uiConfig = {\n    callbacks: {\n      signInSuccessWithAuthResult: function(authResult, redirectUrl) {\n        // User successfully signed in.\n        // Return type determines whether we continue the redirect automatically\n        // or whether we leave that to developer to handle.\n        return true;\n      },\n      uiShown: function() {\n        // The widget is rendered.\n        // Hide the loader.\n        document.getElementById('loader').style.display = 'none'\n      }\n    },\n    // Will use popup for IDP Providers sign-in flow instead of the default, redirect.\n    signInFlow: 'popup',\n    signInSuccessUrl: '<url-to-redirect-to-on-success>',\n    signInOptions: [\n      // Leave the lines as is for the providers you want to offer your users.\n      firebase.auth.EmailAuthProvider.PROVIDER_ID,\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n    ],\n    // Terms of service url.\n    tosUrl: '<your-tos-url>',\n    // Privacy policy url.\n    privacyPolicyUrl: '<your-privacy-policy-url>'\n  };\n\nui.start('#firebaseui-auth-container', uiConfig)\n\nexport default ui"]},"metadata":{},"sourceType":"module"}