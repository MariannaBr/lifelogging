{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_DAY, ADD_CATEGORY, ADD_CELL, REMOVE_CELL } from \"../actionTypes\";\n/* STRUCTURE OF THE STATE\n\nstate = {\n    days: {\n        [day_id]: {\n            categories: {\n                [category_name]: {\n                    cells: []\n                }\n            }\n        }\n    }\n} \nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case ADD_CELL: {\n            return {\n                ...state,\n                days: {\n                    ...state.days,\n                    [action.payload.day_id]: {\n                        ...state.days[action.payload.day_id],\n                        categories: {\n                            ...state.days[action.payload.day_id].categories,\n                            [action.payload.category_name]: {\n                                ...state.days[action.payload.day_id].categories[action.payload.category_name],\n                                cells: [\n                                    ...state.days[action.payload.day_id].categories[action.payload.category_name].cells,\n                                    action.payload.cell_name\n                                ]\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        default:\n            return state\n    }\n}*/\n\n/* STRUCTURE OF THE STATE - 2\n\nstate = {\n    days: {\n        byId: {\n            \"1.Jan.2021\": {\n                id: \"1.Jan.2021\",\n                categories: [],\n                cells: []\n            }\n        },\n        allIds: {\n            [\"1.Jan.2021\", 2.Jan.2021]\n        }\n    },\n    categories: {\n        byId: {\n            \"food\": {\n                id: \"food\",\n                cells: []\n            },\n            \"mood\": {\n                id: \"mood\",\n                cells: []\n            }\n        },\n        allIds: {\n            [\"food\", \"mood\"]\n        }\n    },\n    cells: {\n        byId: {\n            \"bread\": {\n                id: \"bread\",\n                category: \"food\"\n            },\n            \"happy\": {\n                id: \"happy\",\n                category: \"mood\"\n            }\n        },\n        allIds: {\n            [\"bread\", \"happy\"]\n        }\n    }\n} */\n\n/* STRUCTURE OF THE STATE - 3\nstate = {\n    days: {\n        [day_id]: {\n            categories: {\n                [category_name]: {\n                    cells: []\n                }\n            }\n        }\n    },\n    cells: {\n        [cell_name]: {\n            category: \"\",\n            days: []\n        }\n    }\n} */\n\nvar initialState = {\n  days: {\n    \"0\": {\n      categories: {\n        \"test\": {\n          cells: [\"test\"]\n        }\n      }\n    }\n  },\n  cells: {\n    \"test\": {\n      category: \"test\",\n      days: [\"0\"]\n    }\n  }\n};\n\nfunction addDay(state, action) {\n  var payload = action.payload;\n  var dayId = payload.dayId,\n      categoryName = payload.categoryName,\n      cellName = payload.cellName;\n  return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, dayId, {\n    categories: _defineProperty({}, categoryName, {\n      cells: [cellName]\n    })\n  }));\n}\n\nfunction addCategory(state, action) {\n  var payload = action.payload;\n  var dayId = payload.dayId,\n      categoryName = payload.categoryName,\n      cellName = payload.cellName;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    days: _objectSpread(_objectSpread({}, state.days), {}, _defineProperty({}, dayId, _objectSpread(_objectSpread({}, state.days[dayId]), {}, {\n      categories: _objectSpread(_objectSpread({}, state.days[dayId].categories), {}, _defineProperty({}, categoryName, {\n        cells: [cellName]\n      }))\n    })))\n  });\n}\n\nfunction addCell(state, action) {\n  var payload = action.payload;\n  var dayId = payload.dayId,\n      categoryName = payload.categoryName,\n      cellName = payload.cellName;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    days: _objectSpread(_objectSpread({}, state.days), {}, _defineProperty({}, dayId, _objectSpread(_objectSpread({}, state.days[dayId]), {}, {\n      categories: _objectSpread(_objectSpread({}, state.days[dayId].categories), {}, _defineProperty({}, categoryName, _objectSpread(_objectSpread({}, state.days[dayId].categories[categoryName]), {}, {\n        cells: [].concat(_toConsumableArray(state.days[dayId].categories[categoryName].cells), [cellName])\n      })))\n    })))\n  });\n}\n\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_CELL:\n      {\n        var payload = action.payload;\n        var dayId = payload.dayId,\n            categoryName = payload.categoryName,\n            cellName = payload.cellName;\n        return Object.assign({}, state, {\n          days: state.days.map(function (day) {\n            if (day && day === dayId) {\n              categories: day.categories.map(function (category) {\n                if (category && category === categoryName) {\n                  return addCell(state, action);\n                } else {\n                  return addCategory(state, action);\n                }\n              });\n            } else {\n              return addDay(state, action);\n            }\n          })\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/mana/c/lifelogging/redux/reducers/cellReducer.js"],"names":["ADD_DAY","ADD_CATEGORY","ADD_CELL","REMOVE_CELL","initialState","days","categories","cells","category","addDay","state","action","payload","dayId","categoryName","cellName","addCategory","addCell","type","Object","assign","map","day"],"mappings":"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","sourcesContent":["import { ADD_DAY, ADD_CATEGORY, ADD_CELL, REMOVE_CELL } from \"../actionTypes\"\n\n/* STRUCTURE OF THE STATE\n\nstate = {\n    days: {\n        [day_id]: {\n            categories: {\n                [category_name]: {\n                    cells: []\n                }\n            }\n        }\n    }\n} \nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case ADD_CELL: {\n            return {\n                ...state,\n                days: {\n                    ...state.days,\n                    [action.payload.day_id]: {\n                        ...state.days[action.payload.day_id],\n                        categories: {\n                            ...state.days[action.payload.day_id].categories,\n                            [action.payload.category_name]: {\n                                ...state.days[action.payload.day_id].categories[action.payload.category_name],\n                                cells: [\n                                    ...state.days[action.payload.day_id].categories[action.payload.category_name].cells,\n                                    action.payload.cell_name\n                                ]\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        default:\n            return state\n    }\n}*/\n\n/* STRUCTURE OF THE STATE - 2\n\nstate = {\n    days: {\n        byId: {\n            \"1.Jan.2021\": {\n                id: \"1.Jan.2021\",\n                categories: [],\n                cells: []\n            }\n        },\n        allIds: {\n            [\"1.Jan.2021\", 2.Jan.2021]\n        }\n    },\n    categories: {\n        byId: {\n            \"food\": {\n                id: \"food\",\n                cells: []\n            },\n            \"mood\": {\n                id: \"mood\",\n                cells: []\n            }\n        },\n        allIds: {\n            [\"food\", \"mood\"]\n        }\n    },\n    cells: {\n        byId: {\n            \"bread\": {\n                id: \"bread\",\n                category: \"food\"\n            },\n            \"happy\": {\n                id: \"happy\",\n                category: \"mood\"\n            }\n        },\n        allIds: {\n            [\"bread\", \"happy\"]\n        }\n    }\n} */\n\n/* STRUCTURE OF THE STATE - 3\nstate = {\n    days: {\n        [day_id]: {\n            categories: {\n                [category_name]: {\n                    cells: []\n                }\n            }\n        }\n    },\n    cells: {\n        [cell_name]: {\n            category: \"\",\n            days: []\n        }\n    }\n} */\n\nconst initialState = {\n    days: {\n        \"0\": {\n            categories: {\n                \"test\": {\n                    cells: [\"test\"]\n                }\n            }\n        }\n    },\n    cells: {\n        \"test\": {\n            category: \"test\",\n            days: [\"0\"]\n        }\n    }\n}\n\nfunction addDay(state, action) {\n    const { payload } = action\n    const { dayId, categoryName, cellName } = payload\n    return {\n        ...state,\n        [dayId]: {\n            categories: {\n                [categoryName]: {\n                    cells: [cellName]\n                }\n            }\n        }\n    }\n}\n\nfunction addCategory(state, action) {\n    const { payload } = action\n    const { dayId, categoryName, cellName } = payload\n    return {\n        ...state,\n        days: {\n            ...state.days,\n            [dayId]: {\n                ...state.days[dayId],\n                categories: {\n                    ...state.days[dayId].categories,\n                    [categoryName]: {\n                        cells: [cellName]\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction addCell(state, action) {\n    const { payload } = action\n    const { dayId, categoryName, cellName } = payload\n    return {\n        ...state,\n        days: {\n            ...state.days,\n            [dayId]: {\n                ...state.days[dayId],\n                categories: {\n                    ...state.days[dayId].categories,\n                    [categoryName]: {\n                        ...state.days[dayId].categories[categoryName],\n                        cells: [\n                            ...state.days[dayId].categories[categoryName].cells,\n                            cellName\n                        ]\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case ADD_CELL: {\n            const { payload } = action\n            const { dayId, categoryName, cellName } = payload\n            return Object.assign({}, state, {\n                days: state.days.map(day => {\n                    if (day && day === dayId) {\n                        categories: day.categories.map(category => {\n                            if (category && category === categoryName) {\n                                return addCell(state, action)\n                            } else {\n                                return addCategory(state, action)\n                            }\n                        }) \n                    } else {\n                        return addDay(state, action)\n                    }\n                })\n            })\n        }\n\n        default:\n            return state\n    }\n}\n"]},"metadata":{},"sourceType":"module"}