{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/mana/c/lifelogging/components/CategoryChart.js\",\n    _s = $RefreshSig$();\n\nimport { useSelector } from \"react-redux\";\nimport dynamic from \"next/dynamic\";\nimport { todayChart } from \"../helpers/todayDate\";\nimport generateDefaultDays from \"../helpers/defaultDays\";\n\nvar selectDays = function selectDays(state) {\n  return state.categories.days;\n};\n\nvar Chart = dynamic(_c = function _c() {\n  return import(\"react-apexcharts\");\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"react-apexcharts\")];\n    },\n    modules: [\"react-apexcharts\"]\n  }\n});\n_c2 = Chart;\n\nfunction CategoryChart(props) {\n  _s();\n\n  var days = useSelector(selectDays); // Array of objects [{}, {}]\n\n  var daysValues = Object.values(days); // get array of days' ids [\"2021-1-1\", \"2021-1-2\"], inputs: data - array of objects [{}, {}]\n\n  var daysIds = daysValues.map(function (day) {\n    return day.id;\n  });\n  console.log(\"store days\", daysIds); // get array of dates from second day to today [\"2021-1-1\", \"2021-1-2\"]\n\n  var defaultDays = generateDefaultDays(new Date(daysIds[0]), new Date(todayChart));\n  console.log(\"chartdays\", defaultDays);\n  console.log(props.defaultCells);\n\n  function cellHappenedToday(cell, defaultDay) {\n    if (daysIds.includes(defaultDay)) {\n      return daysValues.reduce(function (total, day) {\n        console.log(\"storeday\", day, \"cahrtday\", defaultDay);\n\n        if (day.id === defaultDay) {\n          var categoryIds = Object.values(day.categories).map(function (cat) {\n            return cat.id;\n          });\n\n          if (categoryIds.includes(props.id)) {\n            var cells = Object.values(day.categories[props.id].cells);\n\n            if (cells.includes(cell)) {\n              return total + 1;\n            }\n          }\n        }\n\n        return 0;\n      }, 0);\n    } else {\n      return 0;\n    }\n  }\n\n  var options = {\n    series: props.defaultCells.map(function (cell) {\n      return {\n        name: cell.name,\n        data: defaultDays.map(function (day) {\n          return console.log(day, cell.name), {\n            x: day,\n            y: cellHappenedToday(cell.name, day)\n          };\n        })\n      };\n    }),\n    plotOptions: {\n      heatmap: {\n        colorScale: {\n          ranges: [{\n            from: 0,\n            to: 0,\n            color: \"#F9FAFB\"\n          }, {\n            from: 1,\n            to: 1,\n            color: props.color\n          }]\n        }\n      }\n    }\n  };\n  console.log(options.series);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      options: options.plotOptions,\n      series: options.series,\n      type: \"heatmap\",\n      width: \"500\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CategoryChart, \"3tzja4VaCyvZFWXqwwNrGY7sHz8=\", false, function () {\n  return [useSelector];\n});\n\n_c3 = CategoryChart;\nexport default CategoryChart; // Array of arrays of ids [[\"\", \"\", \"\"], [\"\", \"\", \"\"]]\n//const categoriesIds = categories.map((category) => category.map((cat) => cat.id))\n//console.log(categoriesIds)\n// Array of arrays of arrays of cells [[[\"\",\"\"],[\"\",\"\"]],[[\"\",\"\"],[\"\",\"\"]]]\n//const cells = categories.map((category) => category.map((cat) => cat.cells))\n//console.log(cells)\n// function getDefaultCell(defaultCells) {\n//     defaultCells.forEach((cell) => cell.name)\n// }\n// function cellHappenedToday(cell, cells, category, days, defaultday) {\n//     if (days.includes(defaultday) && category.includes(props.id) && cells.includes(cell)) {\n//         return 1\n//     } else {\n//         return 0\n//     }  \n// }\n// get array of categories of particular day [\"\", \"\"], inputs: day - string, data - array of objects [{}, {}]\n// function getCategoriesofDay(day, data) {\n//     let categories = []\n//     data.forEach((item) => {\n//         if (item.id === day) {\n//             categories = Object.values(item.categories).map((cat) => cat.id)\n//         }\n//     })\n//     return categories\n// }\n// get array of cells of particular category [\"\", \"\"], inputs: category - string, data(category) - array of objects [{}, {}]\n// function getCellsofCategory(category, data) {\n//     let cells = []\n//     data.forEach((item) => {\n//         if (item.id === category) {\n//             cells = Object.values(item.cells)\n//         }\n//     })\n//     return cells\n// }\n//Array of arrays of objects - categories [[{}, {}], [{}, {}]]\n//const categoriesValues = daysValues.map((day) => Object.values(day.categories))\n// const currentSeries = []\n// const series = props.defaultCells.map((cell) => (\n//     {\n//         name: cell.name,\n//         data: defaultDays.map((day) => (\n//             {\n//                 x: day,\n//                 y: cellHappenedToday(cell.name, day)\n//             }\n//         ))\n//     }\n// ))\n// series.map((s) => {\n//     const data = s.data.map((d) => {\n//         return {x: d, y: cellHappenedToday(s.name, d)}\n//     })\n//     currentSeries.push({data, name:s.name})\n// })\n// const plotOptions = {\n//     heatmap: {\n//         colorScale: {\n//             ranges: [{\n//                 from: 0,\n//                 to: 0,\n//                 color: \"#F9FAFB\"\n//             }, {\n//                 from: 1,\n//                 to: 1,\n//                 color: props.color\n//             }]\n//         }\n//     }\n// }\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Chart$dynamic\");\n$RefreshReg$(_c2, \"Chart\");\n$RefreshReg$(_c3, \"CategoryChart\");","map":{"version":3,"sources":["/home/mana/c/lifelogging/components/CategoryChart.js"],"names":["useSelector","dynamic","todayChart","generateDefaultDays","selectDays","state","categories","days","Chart","ssr","CategoryChart","props","daysValues","Object","values","daysIds","map","day","id","console","log","defaultDays","Date","defaultCells","cellHappenedToday","cell","defaultDay","includes","reduce","total","categoryIds","cat","cells","options","series","name","data","x","y","plotOptions","heatmap","colorScale","ranges","from","to","color"],"mappings":"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ACkC;AAHd,WAJK;AADA;AADP;AADA;AAdD,GAAhB;AA+BA1B,EAAAA,OAAO,CAACC,GAAR,CAAYa,OAAO,CAACC,MAApB;AAEA,sBACI;AAAA,2BACI,QAAC,KAAD;AAAO,MAAA,OAAO,EAAED,OAAO,CAACM,WAAxB;AAAqC,MAAA,MAAM,EAAEN,OAAO,CAACC,MAArD;AAA6D,MAAA,IAAI,EAAC,SAAlE;AAA4E,MAAA,KAAK,EAAC;AAAlF;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GA1EQxB,a;UAEQV,W;;;MAFRU,a;AA4ET,eAAeA,aAAf,C,CAGI;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { useSelector } from \"react-redux\"\nimport dynamic from \"next/dynamic\"\nimport { todayChart } from \"../helpers/todayDate\"\nimport generateDefaultDays from \"../helpers/defaultDays\"\n\nconst selectDays = state => state.categories.days\nconst Chart = dynamic(() => import (\"react-apexcharts\"), {ssr: false})\n\nfunction CategoryChart(props) {\n    \n    const days = useSelector(selectDays)\n    // Array of objects [{}, {}]\n    const daysValues = Object.values(days)\n\n    // get array of days' ids [\"2021-1-1\", \"2021-1-2\"], inputs: data - array of objects [{}, {}]\n    const daysIds = daysValues.map((day) => day.id)\n    console.log(\"store days\", daysIds)\n\n    // get array of dates from second day to today [\"2021-1-1\", \"2021-1-2\"]\n    const defaultDays = generateDefaultDays(new Date(daysIds[0]), new Date(todayChart))\n    console.log(\"chartdays\", defaultDays)\n    console.log(props.defaultCells)\n\n    function cellHappenedToday(cell, defaultDay) {\n        if (daysIds.includes(defaultDay)) {\n            return daysValues.reduce((total, day) => {\n                console.log(\"storeday\", day, \"cahrtday\", defaultDay)\n                if (day.id === defaultDay) {\n                    const categoryIds = Object.values(day.categories).map((cat) => cat.id)\n                    if (categoryIds.includes(props.id)) {\n                        const cells = Object.values(day.categories[props.id].cells)\n                        if (cells.includes(cell)) {\n                            return total + 1\n                        }\n                    }\n                }                \n                return 0 \n            }, 0)\n\n        } else {\n            return 0\n        }\n    }\n\n    const options = {\n        series: \n            props.defaultCells.map((cell) => (\n            {\n                name: cell.name,\n                data: defaultDays.map((day) => (\n                    console.log(day, cell.name),\n                    {\n                        x: day,\n                        y: cellHappenedToday(cell.name, day)\n                    }\n                ))\n            }\n        )),\n        plotOptions: {\n            heatmap: {\n                colorScale: {\n                    ranges: [{\n                        from: 0,\n                        to: 0,\n                        color: \"#F9FAFB\"\n                    }, {\n                        from: 1,\n                        to: 1,\n                        color: props.color\n                    }]\n                }\n            }\n        }\n    }\n\n    console.log(options.series)\n\n    return (\n        <div>\n            <Chart options={options.plotOptions} series={options.series} type=\"heatmap\" width=\"500\"/>\n        </div>\n    )\n}\n\nexport default CategoryChart\n\n\n    // Array of arrays of ids [[\"\", \"\", \"\"], [\"\", \"\", \"\"]]\n    //const categoriesIds = categories.map((category) => category.map((cat) => cat.id))\n    //console.log(categoriesIds)\n\n    // Array of arrays of arrays of cells [[[\"\",\"\"],[\"\",\"\"]],[[\"\",\"\"],[\"\",\"\"]]]\n    //const cells = categories.map((category) => category.map((cat) => cat.cells))\n    //console.log(cells)\n\n    // function getDefaultCell(defaultCells) {\n    //     defaultCells.forEach((cell) => cell.name)\n    // }\n\n    // function cellHappenedToday(cell, cells, category, days, defaultday) {\n    //     if (days.includes(defaultday) && category.includes(props.id) && cells.includes(cell)) {\n    //         return 1\n    //     } else {\n    //         return 0\n    //     }  \n    // }\n\n    // get array of categories of particular day [\"\", \"\"], inputs: day - string, data - array of objects [{}, {}]\n    // function getCategoriesofDay(day, data) {\n    //     let categories = []\n    //     data.forEach((item) => {\n    //         if (item.id === day) {\n    //             categories = Object.values(item.categories).map((cat) => cat.id)\n    //         }\n    //     })\n    //     return categories\n    // }\n\n    // get array of cells of particular category [\"\", \"\"], inputs: category - string, data(category) - array of objects [{}, {}]\n    // function getCellsofCategory(category, data) {\n    //     let cells = []\n    //     data.forEach((item) => {\n    //         if (item.id === category) {\n    //             cells = Object.values(item.cells)\n    //         }\n    //     })\n    //     return cells\n    // }\n    //Array of arrays of objects - categories [[{}, {}], [{}, {}]]\n    //const categoriesValues = daysValues.map((day) => Object.values(day.categories))\n\n\n    \n\n\n    // const currentSeries = []\n\n    // const series = props.defaultCells.map((cell) => (\n    //     {\n    //         name: cell.name,\n    //         data: defaultDays.map((day) => (\n    //             {\n    //                 x: day,\n    //                 y: cellHappenedToday(cell.name, day)\n    //             }\n    //         ))\n    //     }\n    // ))\n\n    // series.map((s) => {\n    //     const data = s.data.map((d) => {\n    //         return {x: d, y: cellHappenedToday(s.name, d)}\n    //     })\n    //     currentSeries.push({data, name:s.name})\n    // })\n\n    // const plotOptions = {\n    //     heatmap: {\n    //         colorScale: {\n    //             ranges: [{\n    //                 from: 0,\n    //                 to: 0,\n    //                 color: \"#F9FAFB\"\n    //             }, {\n    //                 from: 1,\n    //                 to: 1,\n    //                 color: props.color\n    //             }]\n    //         }\n    //     }\n    // }\n\n"]},"metadata":{},"sourceType":"module"}