{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/mana/c/lifelogging/components/CategoryChart.js\",\n    _s = $RefreshSig$();\n\nimport { useSelector } from \"react-redux\"; //import { ApexCharts } from \"apexcharts\"\n\nimport { todayChart } from \"../helpers/todayDate\";\nimport generateDefaultDays from \"../helpers/defaultDays\";\n\nvar selectDays = function selectDays(state) {\n  return state.categories.days;\n};\n\nfunction CategoryChart(props) {\n  _s();\n\n  var days = useSelector(selectDays); // Array of objects [{}, {}]\n\n  var daysValues = Object.values(days); // get array of days' ids [\"\", \"\"], inputs: data - array of objects [{}, {}]\n\n  var daysIds = daysValues.map(function (day) {\n    return day.id;\n  });\n  var defaultDays = generateDefaultDays(new Date(daysIds[1]), new Date(todayChart)); //Array of arrays of objects - categories [[{}, {}], [{}, {}]]\n\n  var categoriesValues = daysValues.map(function (day) {\n    return Object.values(day.categories);\n  }); /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // get array of categories of particular day [\"\", \"\"], inputs: day - string, data - array of objects [{}, {}]\n\n  function getCategoriesofDay(day, data) {\n    var categories = [];\n    data.forEach(function (item) {\n      if (item.id === day) {\n        categories = Object.values(item.categories).map(function (cat) {\n          return cat.id;\n        });\n      }\n    });\n    return categories;\n  } // get array of cells of particular category [\"\", \"\"], inputs: category - string, data(category) - array of objects [{}, {}]\n\n\n  function getCellsofCategory(category, data) {\n    var cells = [];\n    data.forEach(function (item) {\n      if (item.id === category) {\n        cells = Object.values(item.cells);\n      }\n    });\n    return cells;\n  }\n\n  function cellHappenedToday(cell, defaultDay) {\n    if (daysIds.includes(defaultDay)) {\n      daysValues.forEach(function (day) {\n        if (day.id === defaultDay) {\n          var categories = Object.values(day.categories).map(function (cat) {\n            return cat.id;\n          });\n\n          if (categories.includes(props.id)) {\n            var cells = Object.values(day.categories[props.id].cells);\n            console.log(\"cells\", cells);\n\n            if (cells.includes(cell)) {\n              return 1;\n            }\n          }\n        }\n      });\n    } else {\n      return 0;\n    }\n  }\n\n  var y = cellHappenedToday(\"sad\", \"2021-1-2\");\n  console.log(y); // const options = props.defaultCells.map((cell) => {\n  //     name: cell.name,\n  //     data: defaultDays.map((day) => {\n  //         x: day,\n  //         y: cellHappenedToday(cell, getCellsofCategory(props.id, getCategoriesofDay(day, daysValues)), getCategoriesofDay(day, daysValues), daysIds, day)\n  //     })\n  // })\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Chart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CategoryChart, \"3tzja4VaCyvZFWXqwwNrGY7sHz8=\", false, function () {\n  return [useSelector];\n});\n\n_c = CategoryChart;\nexport default CategoryChart; // \n//console.log(categories)\n// Array of arrays of ids [[\"\", \"\", \"\"], [\"\", \"\", \"\"]]\n//const categoriesIds = categories.map((category) => category.map((cat) => cat.id))\n//console.log(categoriesIds)\n// Array of arrays of arrays of cells [[[\"\",\"\"],[\"\",\"\"]],[[\"\",\"\"],[\"\",\"\"]]]\n//const cells = categories.map((category) => category.map((cat) => cat.cells))\n//console.log(cells)\n// function getDefaultCell(defaultCells) {\n//     defaultCells.forEach((cell) => cell.name)\n// }\n// function cellHappenedToday(cell, cells, category, days, defaultday) {\n//     if (days.includes(defaultday) && category.includes(props.id) && cells.includes(cell)) {\n//         return 1\n//     } else {\n//         return 0\n//     }  \n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoryChart\");","map":{"version":3,"sources":["/home/mana/c/lifelogging/components/CategoryChart.js"],"names":["useSelector","todayChart","generateDefaultDays","selectDays","state","categories","days","CategoryChart","props","daysValues","Object","values","daysIds","map","day","id","defaultDays","Date","categoriesValues","getCategoriesofDay","data","forEach","item","cat","getCellsofCategory","category","cells","cellHappenedToday","cell","defaultDay","includes","console","log","y"],"mappings":"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","sourcesContent":["import { useSelector } from \"react-redux\"\n//import { ApexCharts } from \"apexcharts\"\nimport { todayChart } from \"../helpers/todayDate\"\nimport generateDefaultDays from \"../helpers/defaultDays\"\n\nconst selectDays = state => state.categories.days\n\nfunction CategoryChart(props) {\n    \n    const days = useSelector(selectDays)\n    // Array of objects [{}, {}]\n    const daysValues = Object.values(days)\n\n    // get array of days' ids [\"\", \"\"], inputs: data - array of objects [{}, {}]\n    const daysIds = daysValues.map((day) => day.id)\n\n    const defaultDays = generateDefaultDays(new Date(daysIds[1]), new Date(todayChart))\n\n    //Array of arrays of objects - categories [[{}, {}], [{}, {}]]\n    const categoriesValues = daysValues.map((day) => Object.values(day.categories))\n \n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    // get array of categories of particular day [\"\", \"\"], inputs: day - string, data - array of objects [{}, {}]\n    function getCategoriesofDay(day, data) {\n        let categories = []\n        data.forEach((item) => {\n            if (item.id === day) {\n                categories = Object.values(item.categories).map((cat) => cat.id)\n            }\n        })\n        return categories\n    }\n\n    // get array of cells of particular category [\"\", \"\"], inputs: category - string, data(category) - array of objects [{}, {}]\n    function getCellsofCategory(category, data) {\n        let cells = []\n        data.forEach((item) => {\n            if (item.id === category) {\n                cells = Object.values(item.cells)\n            }\n        })\n        return cells\n    }\n\n    function cellHappenedToday(cell, defaultDay) {\n        if (daysIds.includes(defaultDay)) {\n            daysValues.forEach((day) => {\n                if (day.id === defaultDay) {\n                    const categories = Object.values(day.categories).map((cat) => cat.id)\n                    if (categories.includes(props.id)) {\n                        const cells = Object.values(day.categories[props.id].cells)\n                        console.log(\"cells\", cells)\n                        if (cells.includes(cell)) {\n                            return 1\n                        }\n                    }\n                }\n            })\n        } else {\n            return 0\n        }\n    }\n\n    const y = cellHappenedToday(\"sad\", \"2021-1-2\")\n    console.log(y)\n    \n    // const options = props.defaultCells.map((cell) => {\n    //     name: cell.name,\n    //     data: defaultDays.map((day) => {\n    //         x: day,\n    //         y: cellHappenedToday(cell, getCellsofCategory(props.id, getCategoriesofDay(day, daysValues)), getCategoriesofDay(day, daysValues), daysIds, day)\n    //     })\n    // })\n\n    return (\n        <div>\n            Chart\n        </div>\n    )\n\n}\n\nexport default CategoryChart\n\n// \n    //console.log(categories)\n\n    // Array of arrays of ids [[\"\", \"\", \"\"], [\"\", \"\", \"\"]]\n    //const categoriesIds = categories.map((category) => category.map((cat) => cat.id))\n    //console.log(categoriesIds)\n\n    // Array of arrays of arrays of cells [[[\"\",\"\"],[\"\",\"\"]],[[\"\",\"\"],[\"\",\"\"]]]\n    //const cells = categories.map((category) => category.map((cat) => cat.cells))\n    //console.log(cells)\n\n    // function getDefaultCell(defaultCells) {\n    //     defaultCells.forEach((cell) => cell.name)\n    // }\n\n    // function cellHappenedToday(cell, cells, category, days, defaultday) {\n    //     if (days.includes(defaultday) && category.includes(props.id) && cells.includes(cell)) {\n    //         return 1\n    //     } else {\n    //         return 0\n    //     }  \n    // }"]},"metadata":{},"sourceType":"module"}